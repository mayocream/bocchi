syntax = "proto3";

package bocchi;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Define the user service
service UserService {
  rpc CreateUser(CreateUserRequest) returns (User);
  rpc GetUser(GetUserRequest) returns (User);
  rpc UpdateUser(UpdateUserRequest) returns (User);
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty);
}

// Define the post service
service PostService {
  rpc CreatePost(CreatePostRequest) returns (Post);
  rpc GetPost(GetPostRequest) returns (Post);
  rpc UpdatePost(UpdatePostRequest) returns (Post);
  rpc DeletePost(DeletePostRequest) returns (google.protobuf.Empty);
}

// Define the comment service
service CommentService {
  rpc CreateComment(CreateCommentRequest) returns (Comment);
  rpc GetComment(GetCommentRequest) returns (Comment);
  rpc DeleteComment(DeleteCommentRequest) returns (google.protobuf.Empty);
}

// Define the like service
service LikeService {
  rpc LikePost(LikePostRequest) returns (google.protobuf.Empty);
  rpc UnlikePost(UnlikePostRequest) returns (google.protobuf.Empty);
}

// Define the follow service
service FollowService {
  rpc FollowUser(FollowUserRequest) returns (google.protobuf.Empty);
  rpc UnfollowUser(UnfollowUserRequest) returns (google.protobuf.Empty);
}

// Define the repost service
service RepostService {
  rpc RepostPost(RepostPostRequest) returns (google.protobuf.Empty);
  rpc RemoveRepost(RemoveRepostRequest) returns (google.protobuf.Empty);
}

// Define the notification service
service NotificationService {
  rpc GetNotifications(GetNotificationsRequest) returns (NotificationList);
  rpc MarkNotificationAsRead(MarkNotificationAsReadRequest) returns (google.protobuf.Empty);
}

// User Messages
message User {
  int32 id = 1;
  string uid = 2;
  string email = 3;
  bool email_verified = 4;
  string username = 5;
  string name = 6;
  string bio = 7;
  string avatar_url = 8;
  string cover_url = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
}

message CreateUserRequest {
  string uid = 1;
  string email = 2;
  string username = 3;
  string name = 4;
  string bio = 5;
  string avatar_url = 6;
  string cover_url = 7;
  bool email_verified = 8;
}

message GetUserRequest {
  int32 id = 1;
}

message UpdateUserRequest {
  int32 id = 1;
  string name = 2;
  string bio = 3;
  string avatar_url = 4;
  string cover_url = 5;
}

message DeleteUserRequest {
  int32 id = 1;
}

// Post Messages
message Post {
  int32 id = 1;
  int32 user_id = 2;
  string content = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

message CreatePostRequest {
  int32 user_id = 1;
  string content = 2;
}

message GetPostRequest {
  int32 id = 1;
}

message UpdatePostRequest {
  int32 id = 1;
  string content = 2;
}

message DeletePostRequest {
  int32 id = 1;
}

// Comment Messages
message Comment {
  int32 id = 1;
  int32 post_id = 2;
  int32 user_id = 3;
  string content = 4;
  google.protobuf.Timestamp created_at = 5;
}

message CreateCommentRequest {
  int32 post_id = 1;
  int32 user_id = 2;
  string content = 3;
}

message GetCommentRequest {
  int32 id = 1;
}

message DeleteCommentRequest {
  int32 id = 1;
}

// Like Messages
message LikePostRequest {
  int32 post_id = 1;
  int32 user_id = 2;
}

message UnlikePostRequest {
  int32 post_id = 1;
  int32 user_id = 2;
}

// Follow Messages
message FollowUserRequest {
  int32 follower_id = 1;
  int32 following_id = 2;
}

message UnfollowUserRequest {
  int32 follower_id = 1;
  int32 following_id = 2;
}

// Repost Messages
message RepostPostRequest {
  int32 post_id = 1;
  int32 user_id = 2;
}

message RemoveRepostRequest {
  int32 post_id = 1;
  int32 user_id = 2;
}

// Notification Messages
message Notification {
  int32 id = 1;
  int32 post_id = 2;
  int32 user_id = 3;
  int32 from_user_id = 4;
  string type = 5;
  bool read = 6;
  google.protobuf.Timestamp created_at = 7;
}

message GetNotificationsRequest {
  int32 user_id = 1;
}

message NotificationList {
  repeated Notification notifications = 1;
}

message MarkNotificationAsReadRequest {
  int32 notification_id = 1;
}

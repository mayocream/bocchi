// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  username  String   @unique
  password  String
  avatar    String?
  bio       String?
  banner    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Content relations
  tweets   Tweet[]
  likes    Like[]
  retweets Retweet[]

  // Follow relations
  following Follow[] @relation("following")
  followers Follow[] @relation("followers")
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  Int
  following   User     @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([createdAt])
}

model Tweet {
  id        Int       @id @default(autoincrement())
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      TweetType @default(ORIGINAL)

  // Reply relation
  parentId Int?
  parent   Tweet?  @relation("Replies", fields: [parentId], references: [id])
  replies  Tweet[] @relation("Replies")

  // Quote relation (for quoted tweets)
  quotedTweetId Int?
  quotedTweet   Tweet?  @relation("Quotes", fields: [quotedTweetId], references: [id])
  quotes        Tweet[] @relation("Quotes")

  // Engagement relations
  likes    Like[]
  retweets Retweet[]

  @@index([authorId])
  @@index([type])
  @@index([createdAt])
}

model Like {
  id        Int      @id @default(autoincrement())
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())

  @@unique([userId, tweetId])
  @@index([createdAt])
  @@index([userId])
  @@index([tweetId])
}

model Retweet {
  id        Int      @id @default(autoincrement())
  tweet     Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade)
  tweetId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())

  @@unique([userId, tweetId])
  @@index([createdAt])
  @@index([userId])
  @@index([tweetId])
}

enum TweetType {
  ORIGINAL
  QUOTE
  REPLY
}

/**
 * @fileoverview gRPC-Web generated client stub for bocchi
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: bocchi.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as bocchi_pb from './bocchi_pb'; // proto import: "bocchi.proto"
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"


export class UserServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateUser = new grpcWeb.MethodDescriptor(
    '/bocchi.UserService/CreateUser',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.CreateUserRequest,
    bocchi_pb.User,
    (request: bocchi_pb.CreateUserRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.User.deserializeBinary
  );

  createUser(
    request: bocchi_pb.CreateUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.User>;

  createUser(
    request: bocchi_pb.CreateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.User) => void): grpcWeb.ClientReadableStream<bocchi_pb.User>;

  createUser(
    request: bocchi_pb.CreateUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.UserService/CreateUser',
        request,
        metadata || {},
        this.methodDescriptorCreateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.UserService/CreateUser',
    request,
    metadata || {},
    this.methodDescriptorCreateUser);
  }

  methodDescriptorGetUser = new grpcWeb.MethodDescriptor(
    '/bocchi.UserService/GetUser',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.GetUserRequest,
    bocchi_pb.User,
    (request: bocchi_pb.GetUserRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.User.deserializeBinary
  );

  getUser(
    request: bocchi_pb.GetUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.User>;

  getUser(
    request: bocchi_pb.GetUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.User) => void): grpcWeb.ClientReadableStream<bocchi_pb.User>;

  getUser(
    request: bocchi_pb.GetUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.UserService/GetUser',
        request,
        metadata || {},
        this.methodDescriptorGetUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.UserService/GetUser',
    request,
    metadata || {},
    this.methodDescriptorGetUser);
  }

  methodDescriptorUpdateUser = new grpcWeb.MethodDescriptor(
    '/bocchi.UserService/UpdateUser',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.UpdateUserRequest,
    bocchi_pb.User,
    (request: bocchi_pb.UpdateUserRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.User.deserializeBinary
  );

  updateUser(
    request: bocchi_pb.UpdateUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.User>;

  updateUser(
    request: bocchi_pb.UpdateUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.User) => void): grpcWeb.ClientReadableStream<bocchi_pb.User>;

  updateUser(
    request: bocchi_pb.UpdateUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.UserService/UpdateUser',
        request,
        metadata || {},
        this.methodDescriptorUpdateUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.UserService/UpdateUser',
    request,
    metadata || {},
    this.methodDescriptorUpdateUser);
  }

  methodDescriptorDeleteUser = new grpcWeb.MethodDescriptor(
    '/bocchi.UserService/DeleteUser',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.DeleteUserRequest,
    google_protobuf_empty_pb.Empty,
    (request: bocchi_pb.DeleteUserRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteUser(
    request: bocchi_pb.DeleteUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteUser(
    request: bocchi_pb.DeleteUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteUser(
    request: bocchi_pb.DeleteUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.UserService/DeleteUser',
        request,
        metadata || {},
        this.methodDescriptorDeleteUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.UserService/DeleteUser',
    request,
    metadata || {},
    this.methodDescriptorDeleteUser);
  }

}

export class PostServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreatePost = new grpcWeb.MethodDescriptor(
    '/bocchi.PostService/CreatePost',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.CreatePostRequest,
    bocchi_pb.Post,
    (request: bocchi_pb.CreatePostRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.Post.deserializeBinary
  );

  createPost(
    request: bocchi_pb.CreatePostRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.Post>;

  createPost(
    request: bocchi_pb.CreatePostRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.Post) => void): grpcWeb.ClientReadableStream<bocchi_pb.Post>;

  createPost(
    request: bocchi_pb.CreatePostRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.Post) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.PostService/CreatePost',
        request,
        metadata || {},
        this.methodDescriptorCreatePost,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.PostService/CreatePost',
    request,
    metadata || {},
    this.methodDescriptorCreatePost);
  }

  methodDescriptorGetPost = new grpcWeb.MethodDescriptor(
    '/bocchi.PostService/GetPost',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.GetPostRequest,
    bocchi_pb.Post,
    (request: bocchi_pb.GetPostRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.Post.deserializeBinary
  );

  getPost(
    request: bocchi_pb.GetPostRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.Post>;

  getPost(
    request: bocchi_pb.GetPostRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.Post) => void): grpcWeb.ClientReadableStream<bocchi_pb.Post>;

  getPost(
    request: bocchi_pb.GetPostRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.Post) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.PostService/GetPost',
        request,
        metadata || {},
        this.methodDescriptorGetPost,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.PostService/GetPost',
    request,
    metadata || {},
    this.methodDescriptorGetPost);
  }

  methodDescriptorUpdatePost = new grpcWeb.MethodDescriptor(
    '/bocchi.PostService/UpdatePost',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.UpdatePostRequest,
    bocchi_pb.Post,
    (request: bocchi_pb.UpdatePostRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.Post.deserializeBinary
  );

  updatePost(
    request: bocchi_pb.UpdatePostRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.Post>;

  updatePost(
    request: bocchi_pb.UpdatePostRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.Post) => void): grpcWeb.ClientReadableStream<bocchi_pb.Post>;

  updatePost(
    request: bocchi_pb.UpdatePostRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.Post) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.PostService/UpdatePost',
        request,
        metadata || {},
        this.methodDescriptorUpdatePost,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.PostService/UpdatePost',
    request,
    metadata || {},
    this.methodDescriptorUpdatePost);
  }

  methodDescriptorDeletePost = new grpcWeb.MethodDescriptor(
    '/bocchi.PostService/DeletePost',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.DeletePostRequest,
    google_protobuf_empty_pb.Empty,
    (request: bocchi_pb.DeletePostRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deletePost(
    request: bocchi_pb.DeletePostRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deletePost(
    request: bocchi_pb.DeletePostRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deletePost(
    request: bocchi_pb.DeletePostRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.PostService/DeletePost',
        request,
        metadata || {},
        this.methodDescriptorDeletePost,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.PostService/DeletePost',
    request,
    metadata || {},
    this.methodDescriptorDeletePost);
  }

}

export class CommentServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateComment = new grpcWeb.MethodDescriptor(
    '/bocchi.CommentService/CreateComment',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.CreateCommentRequest,
    bocchi_pb.Comment,
    (request: bocchi_pb.CreateCommentRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.Comment.deserializeBinary
  );

  createComment(
    request: bocchi_pb.CreateCommentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.Comment>;

  createComment(
    request: bocchi_pb.CreateCommentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.Comment) => void): grpcWeb.ClientReadableStream<bocchi_pb.Comment>;

  createComment(
    request: bocchi_pb.CreateCommentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.Comment) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.CommentService/CreateComment',
        request,
        metadata || {},
        this.methodDescriptorCreateComment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.CommentService/CreateComment',
    request,
    metadata || {},
    this.methodDescriptorCreateComment);
  }

  methodDescriptorGetComment = new grpcWeb.MethodDescriptor(
    '/bocchi.CommentService/GetComment',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.GetCommentRequest,
    bocchi_pb.Comment,
    (request: bocchi_pb.GetCommentRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.Comment.deserializeBinary
  );

  getComment(
    request: bocchi_pb.GetCommentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.Comment>;

  getComment(
    request: bocchi_pb.GetCommentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.Comment) => void): grpcWeb.ClientReadableStream<bocchi_pb.Comment>;

  getComment(
    request: bocchi_pb.GetCommentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.Comment) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.CommentService/GetComment',
        request,
        metadata || {},
        this.methodDescriptorGetComment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.CommentService/GetComment',
    request,
    metadata || {},
    this.methodDescriptorGetComment);
  }

  methodDescriptorDeleteComment = new grpcWeb.MethodDescriptor(
    '/bocchi.CommentService/DeleteComment',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.DeleteCommentRequest,
    google_protobuf_empty_pb.Empty,
    (request: bocchi_pb.DeleteCommentRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  deleteComment(
    request: bocchi_pb.DeleteCommentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  deleteComment(
    request: bocchi_pb.DeleteCommentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  deleteComment(
    request: bocchi_pb.DeleteCommentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.CommentService/DeleteComment',
        request,
        metadata || {},
        this.methodDescriptorDeleteComment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.CommentService/DeleteComment',
    request,
    metadata || {},
    this.methodDescriptorDeleteComment);
  }

}

export class LikeServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorLikePost = new grpcWeb.MethodDescriptor(
    '/bocchi.LikeService/LikePost',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.LikePostRequest,
    google_protobuf_empty_pb.Empty,
    (request: bocchi_pb.LikePostRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  likePost(
    request: bocchi_pb.LikePostRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  likePost(
    request: bocchi_pb.LikePostRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  likePost(
    request: bocchi_pb.LikePostRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.LikeService/LikePost',
        request,
        metadata || {},
        this.methodDescriptorLikePost,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.LikeService/LikePost',
    request,
    metadata || {},
    this.methodDescriptorLikePost);
  }

  methodDescriptorUnlikePost = new grpcWeb.MethodDescriptor(
    '/bocchi.LikeService/UnlikePost',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.UnlikePostRequest,
    google_protobuf_empty_pb.Empty,
    (request: bocchi_pb.UnlikePostRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  unlikePost(
    request: bocchi_pb.UnlikePostRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  unlikePost(
    request: bocchi_pb.UnlikePostRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  unlikePost(
    request: bocchi_pb.UnlikePostRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.LikeService/UnlikePost',
        request,
        metadata || {},
        this.methodDescriptorUnlikePost,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.LikeService/UnlikePost',
    request,
    metadata || {},
    this.methodDescriptorUnlikePost);
  }

}

export class FollowServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorFollowUser = new grpcWeb.MethodDescriptor(
    '/bocchi.FollowService/FollowUser',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.FollowUserRequest,
    google_protobuf_empty_pb.Empty,
    (request: bocchi_pb.FollowUserRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  followUser(
    request: bocchi_pb.FollowUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  followUser(
    request: bocchi_pb.FollowUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  followUser(
    request: bocchi_pb.FollowUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.FollowService/FollowUser',
        request,
        metadata || {},
        this.methodDescriptorFollowUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.FollowService/FollowUser',
    request,
    metadata || {},
    this.methodDescriptorFollowUser);
  }

  methodDescriptorUnfollowUser = new grpcWeb.MethodDescriptor(
    '/bocchi.FollowService/UnfollowUser',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.UnfollowUserRequest,
    google_protobuf_empty_pb.Empty,
    (request: bocchi_pb.UnfollowUserRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  unfollowUser(
    request: bocchi_pb.UnfollowUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  unfollowUser(
    request: bocchi_pb.UnfollowUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  unfollowUser(
    request: bocchi_pb.UnfollowUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.FollowService/UnfollowUser',
        request,
        metadata || {},
        this.methodDescriptorUnfollowUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.FollowService/UnfollowUser',
    request,
    metadata || {},
    this.methodDescriptorUnfollowUser);
  }

}

export class RepostServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorRepostPost = new grpcWeb.MethodDescriptor(
    '/bocchi.RepostService/RepostPost',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.RepostPostRequest,
    google_protobuf_empty_pb.Empty,
    (request: bocchi_pb.RepostPostRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  repostPost(
    request: bocchi_pb.RepostPostRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  repostPost(
    request: bocchi_pb.RepostPostRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  repostPost(
    request: bocchi_pb.RepostPostRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.RepostService/RepostPost',
        request,
        metadata || {},
        this.methodDescriptorRepostPost,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.RepostService/RepostPost',
    request,
    metadata || {},
    this.methodDescriptorRepostPost);
  }

  methodDescriptorRemoveRepost = new grpcWeb.MethodDescriptor(
    '/bocchi.RepostService/RemoveRepost',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.RemoveRepostRequest,
    google_protobuf_empty_pb.Empty,
    (request: bocchi_pb.RemoveRepostRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  removeRepost(
    request: bocchi_pb.RemoveRepostRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  removeRepost(
    request: bocchi_pb.RemoveRepostRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  removeRepost(
    request: bocchi_pb.RemoveRepostRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.RepostService/RemoveRepost',
        request,
        metadata || {},
        this.methodDescriptorRemoveRepost,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.RepostService/RemoveRepost',
    request,
    metadata || {},
    this.methodDescriptorRemoveRepost);
  }

}

export class NotificationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetNotifications = new grpcWeb.MethodDescriptor(
    '/bocchi.NotificationService/GetNotifications',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.GetNotificationsRequest,
    bocchi_pb.NotificationList,
    (request: bocchi_pb.GetNotificationsRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.NotificationList.deserializeBinary
  );

  getNotifications(
    request: bocchi_pb.GetNotificationsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.NotificationList>;

  getNotifications(
    request: bocchi_pb.GetNotificationsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.NotificationList) => void): grpcWeb.ClientReadableStream<bocchi_pb.NotificationList>;

  getNotifications(
    request: bocchi_pb.GetNotificationsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.NotificationList) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.NotificationService/GetNotifications',
        request,
        metadata || {},
        this.methodDescriptorGetNotifications,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.NotificationService/GetNotifications',
    request,
    metadata || {},
    this.methodDescriptorGetNotifications);
  }

  methodDescriptorMarkNotificationAsRead = new grpcWeb.MethodDescriptor(
    '/bocchi.NotificationService/MarkNotificationAsRead',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.MarkNotificationAsReadRequest,
    google_protobuf_empty_pb.Empty,
    (request: bocchi_pb.MarkNotificationAsReadRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  markNotificationAsRead(
    request: bocchi_pb.MarkNotificationAsReadRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  markNotificationAsRead(
    request: bocchi_pb.MarkNotificationAsReadRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  markNotificationAsRead(
    request: bocchi_pb.MarkNotificationAsReadRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.NotificationService/MarkNotificationAsRead',
        request,
        metadata || {},
        this.methodDescriptorMarkNotificationAsRead,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.NotificationService/MarkNotificationAsRead',
    request,
    metadata || {},
    this.methodDescriptorMarkNotificationAsRead);
  }

}


/**
 * @fileoverview gRPC-Web generated client stub for bocchi
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: bocchi.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as bocchi_pb from './bocchi_pb'; // proto import: "bocchi.proto"
import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb'; // proto import: "google/protobuf/empty.proto"


export class UserClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorRegister = new grpcWeb.MethodDescriptor(
    '/bocchi.User/Register',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.RegisterRequest,
    bocchi_pb.AccessToken,
    (request: bocchi_pb.RegisterRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.AccessToken.deserializeBinary
  );

  register(
    request: bocchi_pb.RegisterRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.AccessToken>;

  register(
    request: bocchi_pb.RegisterRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.AccessToken) => void): grpcWeb.ClientReadableStream<bocchi_pb.AccessToken>;

  register(
    request: bocchi_pb.RegisterRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.AccessToken) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.User/Register',
        request,
        metadata || {},
        this.methodDescriptorRegister,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.User/Register',
    request,
    metadata || {},
    this.methodDescriptorRegister);
  }

  methodDescriptorLogin = new grpcWeb.MethodDescriptor(
    '/bocchi.User/Login',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.LoginRequest,
    bocchi_pb.AccessToken,
    (request: bocchi_pb.LoginRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.AccessToken.deserializeBinary
  );

  login(
    request: bocchi_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.AccessToken>;

  login(
    request: bocchi_pb.LoginRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.AccessToken) => void): grpcWeb.ClientReadableStream<bocchi_pb.AccessToken>;

  login(
    request: bocchi_pb.LoginRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.AccessToken) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.User/Login',
        request,
        metadata || {},
        this.methodDescriptorLogin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.User/Login',
    request,
    metadata || {},
    this.methodDescriptorLogin);
  }

  methodDescriptorGetProfile = new grpcWeb.MethodDescriptor(
    '/bocchi.User/GetProfile',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.GetProfileRequest,
    bocchi_pb.GetProfileResponse,
    (request: bocchi_pb.GetProfileRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.GetProfileResponse.deserializeBinary
  );

  getProfile(
    request: bocchi_pb.GetProfileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.GetProfileResponse>;

  getProfile(
    request: bocchi_pb.GetProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.GetProfileResponse) => void): grpcWeb.ClientReadableStream<bocchi_pb.GetProfileResponse>;

  getProfile(
    request: bocchi_pb.GetProfileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.GetProfileResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.User/GetProfile',
        request,
        metadata || {},
        this.methodDescriptorGetProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.User/GetProfile',
    request,
    metadata || {},
    this.methodDescriptorGetProfile);
  }

  methodDescriptorUpdateProfile = new grpcWeb.MethodDescriptor(
    '/bocchi.User/UpdateProfile',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.UpdateProfileRequest,
    google_protobuf_empty_pb.Empty,
    (request: bocchi_pb.UpdateProfileRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  updateProfile(
    request: bocchi_pb.UpdateProfileRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  updateProfile(
    request: bocchi_pb.UpdateProfileRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  updateProfile(
    request: bocchi_pb.UpdateProfileRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.User/UpdateProfile',
        request,
        metadata || {},
        this.methodDescriptorUpdateProfile,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.User/UpdateProfile',
    request,
    metadata || {},
    this.methodDescriptorUpdateProfile);
  }

  methodDescriptorFollow = new grpcWeb.MethodDescriptor(
    '/bocchi.User/Follow',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.FollowRequest,
    google_protobuf_empty_pb.Empty,
    (request: bocchi_pb.FollowRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  follow(
    request: bocchi_pb.FollowRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  follow(
    request: bocchi_pb.FollowRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  follow(
    request: bocchi_pb.FollowRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.User/Follow',
        request,
        metadata || {},
        this.methodDescriptorFollow,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.User/Follow',
    request,
    metadata || {},
    this.methodDescriptorFollow);
  }

  methodDescriptorUnfollow = new grpcWeb.MethodDescriptor(
    '/bocchi.User/Unfollow',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.UnfollowRequest,
    google_protobuf_empty_pb.Empty,
    (request: bocchi_pb.UnfollowRequest) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  unfollow(
    request: bocchi_pb.UnfollowRequest,
    metadata?: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  unfollow(
    request: bocchi_pb.UnfollowRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  unfollow(
    request: bocchi_pb.UnfollowRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.User/Unfollow',
        request,
        metadata || {},
        this.methodDescriptorUnfollow,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.User/Unfollow',
    request,
    metadata || {},
    this.methodDescriptorUnfollow);
  }

  methodDescriptorGetFollowers = new grpcWeb.MethodDescriptor(
    '/bocchi.User/GetFollowers',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.GetFollowersRequest,
    bocchi_pb.GetFollowersResponse,
    (request: bocchi_pb.GetFollowersRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.GetFollowersResponse.deserializeBinary
  );

  getFollowers(
    request: bocchi_pb.GetFollowersRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.GetFollowersResponse>;

  getFollowers(
    request: bocchi_pb.GetFollowersRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.GetFollowersResponse) => void): grpcWeb.ClientReadableStream<bocchi_pb.GetFollowersResponse>;

  getFollowers(
    request: bocchi_pb.GetFollowersRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.GetFollowersResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.User/GetFollowers',
        request,
        metadata || {},
        this.methodDescriptorGetFollowers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.User/GetFollowers',
    request,
    metadata || {},
    this.methodDescriptorGetFollowers);
  }

  methodDescriptorGetFollowing = new grpcWeb.MethodDescriptor(
    '/bocchi.User/GetFollowing',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.GetFollowingRequest,
    bocchi_pb.GetFollowingResponse,
    (request: bocchi_pb.GetFollowingRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.GetFollowingResponse.deserializeBinary
  );

  getFollowing(
    request: bocchi_pb.GetFollowingRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.GetFollowingResponse>;

  getFollowing(
    request: bocchi_pb.GetFollowingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.GetFollowingResponse) => void): grpcWeb.ClientReadableStream<bocchi_pb.GetFollowingResponse>;

  getFollowing(
    request: bocchi_pb.GetFollowingRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.GetFollowingResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.User/GetFollowing',
        request,
        metadata || {},
        this.methodDescriptorGetFollowing,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.User/GetFollowing',
    request,
    metadata || {},
    this.methodDescriptorGetFollowing);
  }

  methodDescriptorSearch = new grpcWeb.MethodDescriptor(
    '/bocchi.User/Search',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.SearchUserRequest,
    bocchi_pb.SearchUserResponse,
    (request: bocchi_pb.SearchUserRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.SearchUserResponse.deserializeBinary
  );

  search(
    request: bocchi_pb.SearchUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.SearchUserResponse>;

  search(
    request: bocchi_pb.SearchUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.SearchUserResponse) => void): grpcWeb.ClientReadableStream<bocchi_pb.SearchUserResponse>;

  search(
    request: bocchi_pb.SearchUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.SearchUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.User/Search',
        request,
        metadata || {},
        this.methodDescriptorSearch,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.User/Search',
    request,
    metadata || {},
    this.methodDescriptorSearch);
  }

}

export class MediaClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorUploadImage = new grpcWeb.MethodDescriptor(
    '/bocchi.Media/UploadImage',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.UploadImageRequest,
    bocchi_pb.UploadImageResponse,
    (request: bocchi_pb.UploadImageRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.UploadImageResponse.deserializeBinary
  );

  uploadImage(
    request: bocchi_pb.UploadImageRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.UploadImageResponse>;

  uploadImage(
    request: bocchi_pb.UploadImageRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.UploadImageResponse) => void): grpcWeb.ClientReadableStream<bocchi_pb.UploadImageResponse>;

  uploadImage(
    request: bocchi_pb.UploadImageRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.UploadImageResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.Media/UploadImage',
        request,
        metadata || {},
        this.methodDescriptorUploadImage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.Media/UploadImage',
    request,
    metadata || {},
    this.methodDescriptorUploadImage);
  }

}

export class PostClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreatePost = new grpcWeb.MethodDescriptor(
    '/bocchi.Post/CreatePost',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.CreatePostRequest,
    bocchi_pb.CreatePostResponse,
    (request: bocchi_pb.CreatePostRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.CreatePostResponse.deserializeBinary
  );

  createPost(
    request: bocchi_pb.CreatePostRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.CreatePostResponse>;

  createPost(
    request: bocchi_pb.CreatePostRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.CreatePostResponse) => void): grpcWeb.ClientReadableStream<bocchi_pb.CreatePostResponse>;

  createPost(
    request: bocchi_pb.CreatePostRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.CreatePostResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.Post/CreatePost',
        request,
        metadata || {},
        this.methodDescriptorCreatePost,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.Post/CreatePost',
    request,
    metadata || {},
    this.methodDescriptorCreatePost);
  }

  methodDescriptorGetPost = new grpcWeb.MethodDescriptor(
    '/bocchi.Post/GetPost',
    grpcWeb.MethodType.UNARY,
    bocchi_pb.GetPostRequest,
    bocchi_pb.GetPostResponse,
    (request: bocchi_pb.GetPostRequest) => {
      return request.serializeBinary();
    },
    bocchi_pb.GetPostResponse.deserializeBinary
  );

  getPost(
    request: bocchi_pb.GetPostRequest,
    metadata?: grpcWeb.Metadata | null): Promise<bocchi_pb.GetPostResponse>;

  getPost(
    request: bocchi_pb.GetPostRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: bocchi_pb.GetPostResponse) => void): grpcWeb.ClientReadableStream<bocchi_pb.GetPostResponse>;

  getPost(
    request: bocchi_pb.GetPostRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: bocchi_pb.GetPostResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/bocchi.Post/GetPost',
        request,
        metadata || {},
        this.methodDescriptorGetPost,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/bocchi.Post/GetPost',
    request,
    metadata || {},
    this.methodDescriptorGetPost);
  }

}


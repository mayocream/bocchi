// Code generated by ent, DO NOT EDIT.

package directmessage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mayocream/twitter/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldLTE(FieldID, id))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldEQ(FieldContent, v))
}

// SentAt applies equality check predicate on the "sent_at" field. It's identical to SentAtEQ.
func SentAt(v time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldEQ(FieldSentAt, v))
}

// ReadAt applies equality check predicate on the "read_at" field. It's identical to ReadAtEQ.
func ReadAt(v time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldEQ(FieldReadAt, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldContainsFold(FieldContent, v))
}

// SentAtEQ applies the EQ predicate on the "sent_at" field.
func SentAtEQ(v time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldEQ(FieldSentAt, v))
}

// SentAtNEQ applies the NEQ predicate on the "sent_at" field.
func SentAtNEQ(v time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldNEQ(FieldSentAt, v))
}

// SentAtIn applies the In predicate on the "sent_at" field.
func SentAtIn(vs ...time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldIn(FieldSentAt, vs...))
}

// SentAtNotIn applies the NotIn predicate on the "sent_at" field.
func SentAtNotIn(vs ...time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldNotIn(FieldSentAt, vs...))
}

// SentAtGT applies the GT predicate on the "sent_at" field.
func SentAtGT(v time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldGT(FieldSentAt, v))
}

// SentAtGTE applies the GTE predicate on the "sent_at" field.
func SentAtGTE(v time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldGTE(FieldSentAt, v))
}

// SentAtLT applies the LT predicate on the "sent_at" field.
func SentAtLT(v time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldLT(FieldSentAt, v))
}

// SentAtLTE applies the LTE predicate on the "sent_at" field.
func SentAtLTE(v time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldLTE(FieldSentAt, v))
}

// ReadAtEQ applies the EQ predicate on the "read_at" field.
func ReadAtEQ(v time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldEQ(FieldReadAt, v))
}

// ReadAtNEQ applies the NEQ predicate on the "read_at" field.
func ReadAtNEQ(v time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldNEQ(FieldReadAt, v))
}

// ReadAtIn applies the In predicate on the "read_at" field.
func ReadAtIn(vs ...time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldIn(FieldReadAt, vs...))
}

// ReadAtNotIn applies the NotIn predicate on the "read_at" field.
func ReadAtNotIn(vs ...time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldNotIn(FieldReadAt, vs...))
}

// ReadAtGT applies the GT predicate on the "read_at" field.
func ReadAtGT(v time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldGT(FieldReadAt, v))
}

// ReadAtGTE applies the GTE predicate on the "read_at" field.
func ReadAtGTE(v time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldGTE(FieldReadAt, v))
}

// ReadAtLT applies the LT predicate on the "read_at" field.
func ReadAtLT(v time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldLT(FieldReadAt, v))
}

// ReadAtLTE applies the LTE predicate on the "read_at" field.
func ReadAtLTE(v time.Time) predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldLTE(FieldReadAt, v))
}

// ReadAtIsNil applies the IsNil predicate on the "read_at" field.
func ReadAtIsNil() predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldIsNull(FieldReadAt))
}

// ReadAtNotNil applies the NotNil predicate on the "read_at" field.
func ReadAtNotNil() predicate.DirectMessage {
	return predicate.DirectMessage(sql.FieldNotNull(FieldReadAt))
}

// HasSender applies the HasEdge predicate on the "sender" edge.
func HasSender() predicate.DirectMessage {
	return predicate.DirectMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SenderTable, SenderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSenderWith applies the HasEdge predicate on the "sender" edge with a given conditions (other predicates).
func HasSenderWith(preds ...predicate.User) predicate.DirectMessage {
	return predicate.DirectMessage(func(s *sql.Selector) {
		step := newSenderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReceiver applies the HasEdge predicate on the "receiver" edge.
func HasReceiver() predicate.DirectMessage {
	return predicate.DirectMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ReceiverTable, ReceiverColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReceiverWith applies the HasEdge predicate on the "receiver" edge with a given conditions (other predicates).
func HasReceiverWith(preds ...predicate.User) predicate.DirectMessage {
	return predicate.DirectMessage(func(s *sql.Selector) {
		step := newReceiverStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DirectMessage) predicate.DirectMessage {
	return predicate.DirectMessage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DirectMessage) predicate.DirectMessage {
	return predicate.DirectMessage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DirectMessage) predicate.DirectMessage {
	return predicate.DirectMessage(sql.NotPredicates(p))
}

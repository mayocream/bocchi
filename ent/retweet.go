// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mayocream/twitter2/ent/retweet"
)

// Retweet is the model entity for the Retweet schema.
type Retweet struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TweetID holds the value of the "tweet_id" field.
	TweetID int `json:"tweet_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RetweetQuery when eager-loading is set.
	Edges        RetweetEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RetweetEdges holds the relations/edges for other nodes in the graph.
type RetweetEdges struct {
	// Tweet holds the value of the tweet edge.
	Tweet []*Tweet `json:"tweet,omitempty"`
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TweetOrErr returns the Tweet value or an error if the edge
// was not loaded in eager-loading.
func (e RetweetEdges) TweetOrErr() ([]*Tweet, error) {
	if e.loadedTypes[0] {
		return e.Tweet, nil
	}
	return nil, &NotLoadedError{edge: "tweet"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e RetweetEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Retweet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case retweet.FieldID, retweet.FieldTweetID, retweet.FieldUserID:
			values[i] = new(sql.NullInt64)
		case retweet.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Retweet fields.
func (r *Retweet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case retweet.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case retweet.FieldTweetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tweet_id", values[i])
			} else if value.Valid {
				r.TweetID = int(value.Int64)
			}
		case retweet.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				r.UserID = int(value.Int64)
			}
		case retweet.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Retweet.
// This includes values selected through modifiers, order, etc.
func (r *Retweet) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryTweet queries the "tweet" edge of the Retweet entity.
func (r *Retweet) QueryTweet() *TweetQuery {
	return NewRetweetClient(r.config).QueryTweet(r)
}

// QueryUser queries the "user" edge of the Retweet entity.
func (r *Retweet) QueryUser() *UserQuery {
	return NewRetweetClient(r.config).QueryUser(r)
}

// Update returns a builder for updating this Retweet.
// Note that you need to call Retweet.Unwrap() before calling this method if this Retweet
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Retweet) Update() *RetweetUpdateOne {
	return NewRetweetClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Retweet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Retweet) Unwrap() *Retweet {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Retweet is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Retweet) String() string {
	var builder strings.Builder
	builder.WriteString("Retweet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("tweet_id=")
	builder.WriteString(fmt.Sprintf("%v", r.TweetID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", r.UserID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Retweets is a parsable slice of Retweet.
type Retweets []*Retweet

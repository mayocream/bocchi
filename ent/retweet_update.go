// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mayocream/twitter2/ent/predicate"
	"github.com/mayocream/twitter2/ent/retweet"
	"github.com/mayocream/twitter2/ent/tweet"
	"github.com/mayocream/twitter2/ent/user"
)

// RetweetUpdate is the builder for updating Retweet entities.
type RetweetUpdate struct {
	config
	hooks    []Hook
	mutation *RetweetMutation
}

// Where appends a list predicates to the RetweetUpdate builder.
func (ru *RetweetUpdate) Where(ps ...predicate.Retweet) *RetweetUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetTweetID sets the "tweet_id" field.
func (ru *RetweetUpdate) SetTweetID(i int) *RetweetUpdate {
	ru.mutation.ResetTweetID()
	ru.mutation.SetTweetID(i)
	return ru
}

// SetNillableTweetID sets the "tweet_id" field if the given value is not nil.
func (ru *RetweetUpdate) SetNillableTweetID(i *int) *RetweetUpdate {
	if i != nil {
		ru.SetTweetID(*i)
	}
	return ru
}

// AddTweetID adds i to the "tweet_id" field.
func (ru *RetweetUpdate) AddTweetID(i int) *RetweetUpdate {
	ru.mutation.AddTweetID(i)
	return ru
}

// SetUserID sets the "user_id" field.
func (ru *RetweetUpdate) SetUserID(i int) *RetweetUpdate {
	ru.mutation.ResetUserID()
	ru.mutation.SetUserID(i)
	return ru
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ru *RetweetUpdate) SetNillableUserID(i *int) *RetweetUpdate {
	if i != nil {
		ru.SetUserID(*i)
	}
	return ru
}

// AddUserID adds i to the "user_id" field.
func (ru *RetweetUpdate) AddUserID(i int) *RetweetUpdate {
	ru.mutation.AddUserID(i)
	return ru
}

// SetCreatedAt sets the "created_at" field.
func (ru *RetweetUpdate) SetCreatedAt(t time.Time) *RetweetUpdate {
	ru.mutation.SetCreatedAt(t)
	return ru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ru *RetweetUpdate) SetNillableCreatedAt(t *time.Time) *RetweetUpdate {
	if t != nil {
		ru.SetCreatedAt(*t)
	}
	return ru
}

// AddTweetIDs adds the "tweet" edge to the Tweet entity by IDs.
func (ru *RetweetUpdate) AddTweetIDs(ids ...int) *RetweetUpdate {
	ru.mutation.AddTweetIDs(ids...)
	return ru
}

// AddTweet adds the "tweet" edges to the Tweet entity.
func (ru *RetweetUpdate) AddTweet(t ...*Tweet) *RetweetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.AddTweetIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (ru *RetweetUpdate) AddUserIDs(ids ...int) *RetweetUpdate {
	ru.mutation.AddUserIDs(ids...)
	return ru
}

// AddUser adds the "user" edges to the User entity.
func (ru *RetweetUpdate) AddUser(u ...*User) *RetweetUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.AddUserIDs(ids...)
}

// Mutation returns the RetweetMutation object of the builder.
func (ru *RetweetUpdate) Mutation() *RetweetMutation {
	return ru.mutation
}

// ClearTweet clears all "tweet" edges to the Tweet entity.
func (ru *RetweetUpdate) ClearTweet() *RetweetUpdate {
	ru.mutation.ClearTweet()
	return ru
}

// RemoveTweetIDs removes the "tweet" edge to Tweet entities by IDs.
func (ru *RetweetUpdate) RemoveTweetIDs(ids ...int) *RetweetUpdate {
	ru.mutation.RemoveTweetIDs(ids...)
	return ru
}

// RemoveTweet removes "tweet" edges to Tweet entities.
func (ru *RetweetUpdate) RemoveTweet(t ...*Tweet) *RetweetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.RemoveTweetIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (ru *RetweetUpdate) ClearUser() *RetweetUpdate {
	ru.mutation.ClearUser()
	return ru
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (ru *RetweetUpdate) RemoveUserIDs(ids ...int) *RetweetUpdate {
	ru.mutation.RemoveUserIDs(ids...)
	return ru
}

// RemoveUser removes "user" edges to User entities.
func (ru *RetweetUpdate) RemoveUser(u ...*User) *RetweetUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RetweetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RetweetUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RetweetUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RetweetUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RetweetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(retweet.Table, retweet.Columns, sqlgraph.NewFieldSpec(retweet.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.TweetID(); ok {
		_spec.SetField(retweet.FieldTweetID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedTweetID(); ok {
		_spec.AddField(retweet.FieldTweetID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.UserID(); ok {
		_spec.SetField(retweet.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedUserID(); ok {
		_spec.AddField(retweet.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ru.mutation.CreatedAt(); ok {
		_spec.SetField(retweet.FieldCreatedAt, field.TypeTime, value)
	}
	if ru.mutation.TweetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   retweet.TweetTable,
			Columns: retweet.TweetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedTweetIDs(); len(nodes) > 0 && !ru.mutation.TweetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   retweet.TweetTable,
			Columns: retweet.TweetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TweetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   retweet.TweetTable,
			Columns: retweet.TweetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   retweet.UserTable,
			Columns: retweet.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedUserIDs(); len(nodes) > 0 && !ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   retweet.UserTable,
			Columns: retweet.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   retweet.UserTable,
			Columns: retweet.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retweet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RetweetUpdateOne is the builder for updating a single Retweet entity.
type RetweetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RetweetMutation
}

// SetTweetID sets the "tweet_id" field.
func (ruo *RetweetUpdateOne) SetTweetID(i int) *RetweetUpdateOne {
	ruo.mutation.ResetTweetID()
	ruo.mutation.SetTweetID(i)
	return ruo
}

// SetNillableTweetID sets the "tweet_id" field if the given value is not nil.
func (ruo *RetweetUpdateOne) SetNillableTweetID(i *int) *RetweetUpdateOne {
	if i != nil {
		ruo.SetTweetID(*i)
	}
	return ruo
}

// AddTweetID adds i to the "tweet_id" field.
func (ruo *RetweetUpdateOne) AddTweetID(i int) *RetweetUpdateOne {
	ruo.mutation.AddTweetID(i)
	return ruo
}

// SetUserID sets the "user_id" field.
func (ruo *RetweetUpdateOne) SetUserID(i int) *RetweetUpdateOne {
	ruo.mutation.ResetUserID()
	ruo.mutation.SetUserID(i)
	return ruo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ruo *RetweetUpdateOne) SetNillableUserID(i *int) *RetweetUpdateOne {
	if i != nil {
		ruo.SetUserID(*i)
	}
	return ruo
}

// AddUserID adds i to the "user_id" field.
func (ruo *RetweetUpdateOne) AddUserID(i int) *RetweetUpdateOne {
	ruo.mutation.AddUserID(i)
	return ruo
}

// SetCreatedAt sets the "created_at" field.
func (ruo *RetweetUpdateOne) SetCreatedAt(t time.Time) *RetweetUpdateOne {
	ruo.mutation.SetCreatedAt(t)
	return ruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruo *RetweetUpdateOne) SetNillableCreatedAt(t *time.Time) *RetweetUpdateOne {
	if t != nil {
		ruo.SetCreatedAt(*t)
	}
	return ruo
}

// AddTweetIDs adds the "tweet" edge to the Tweet entity by IDs.
func (ruo *RetweetUpdateOne) AddTweetIDs(ids ...int) *RetweetUpdateOne {
	ruo.mutation.AddTweetIDs(ids...)
	return ruo
}

// AddTweet adds the "tweet" edges to the Tweet entity.
func (ruo *RetweetUpdateOne) AddTweet(t ...*Tweet) *RetweetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.AddTweetIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (ruo *RetweetUpdateOne) AddUserIDs(ids ...int) *RetweetUpdateOne {
	ruo.mutation.AddUserIDs(ids...)
	return ruo
}

// AddUser adds the "user" edges to the User entity.
func (ruo *RetweetUpdateOne) AddUser(u ...*User) *RetweetUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.AddUserIDs(ids...)
}

// Mutation returns the RetweetMutation object of the builder.
func (ruo *RetweetUpdateOne) Mutation() *RetweetMutation {
	return ruo.mutation
}

// ClearTweet clears all "tweet" edges to the Tweet entity.
func (ruo *RetweetUpdateOne) ClearTweet() *RetweetUpdateOne {
	ruo.mutation.ClearTweet()
	return ruo
}

// RemoveTweetIDs removes the "tweet" edge to Tweet entities by IDs.
func (ruo *RetweetUpdateOne) RemoveTweetIDs(ids ...int) *RetweetUpdateOne {
	ruo.mutation.RemoveTweetIDs(ids...)
	return ruo
}

// RemoveTweet removes "tweet" edges to Tweet entities.
func (ruo *RetweetUpdateOne) RemoveTweet(t ...*Tweet) *RetweetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.RemoveTweetIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (ruo *RetweetUpdateOne) ClearUser() *RetweetUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (ruo *RetweetUpdateOne) RemoveUserIDs(ids ...int) *RetweetUpdateOne {
	ruo.mutation.RemoveUserIDs(ids...)
	return ruo
}

// RemoveUser removes "user" edges to User entities.
func (ruo *RetweetUpdateOne) RemoveUser(u ...*User) *RetweetUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the RetweetUpdate builder.
func (ruo *RetweetUpdateOne) Where(ps ...predicate.Retweet) *RetweetUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RetweetUpdateOne) Select(field string, fields ...string) *RetweetUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Retweet entity.
func (ruo *RetweetUpdateOne) Save(ctx context.Context) (*Retweet, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RetweetUpdateOne) SaveX(ctx context.Context) *Retweet {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RetweetUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RetweetUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RetweetUpdateOne) sqlSave(ctx context.Context) (_node *Retweet, err error) {
	_spec := sqlgraph.NewUpdateSpec(retweet.Table, retweet.Columns, sqlgraph.NewFieldSpec(retweet.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Retweet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, retweet.FieldID)
		for _, f := range fields {
			if !retweet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != retweet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.TweetID(); ok {
		_spec.SetField(retweet.FieldTweetID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedTweetID(); ok {
		_spec.AddField(retweet.FieldTweetID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.UserID(); ok {
		_spec.SetField(retweet.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedUserID(); ok {
		_spec.AddField(retweet.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.CreatedAt(); ok {
		_spec.SetField(retweet.FieldCreatedAt, field.TypeTime, value)
	}
	if ruo.mutation.TweetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   retweet.TweetTable,
			Columns: retweet.TweetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedTweetIDs(); len(nodes) > 0 && !ruo.mutation.TweetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   retweet.TweetTable,
			Columns: retweet.TweetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TweetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   retweet.TweetTable,
			Columns: retweet.TweetPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   retweet.UserTable,
			Columns: retweet.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedUserIDs(); len(nodes) > 0 && !ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   retweet.UserTable,
			Columns: retweet.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   retweet.UserTable,
			Columns: retweet.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Retweet{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{retweet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}

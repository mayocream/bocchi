// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mayocream/twitter/ent/directmessage"
	"github.com/mayocream/twitter/ent/hashtag"
	"github.com/mayocream/twitter/ent/notification"
	"github.com/mayocream/twitter/ent/predicate"
	"github.com/mayocream/twitter/ent/tweet"
	"github.com/mayocream/twitter/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDirectMessage = "DirectMessage"
	TypeHashtag       = "Hashtag"
	TypeNotification  = "Notification"
	TypeTweet         = "Tweet"
	TypeUser          = "User"
)

// DirectMessageMutation represents an operation that mutates the DirectMessage nodes in the graph.
type DirectMessageMutation struct {
	config
	op              Op
	typ             string
	id              *int
	content         *string
	sent_at         *time.Time
	read_at         *time.Time
	clearedFields   map[string]struct{}
	sender          *int
	clearedsender   bool
	receiver        *int
	clearedreceiver bool
	done            bool
	oldValue        func(context.Context) (*DirectMessage, error)
	predicates      []predicate.DirectMessage
}

var _ ent.Mutation = (*DirectMessageMutation)(nil)

// directmessageOption allows management of the mutation configuration using functional options.
type directmessageOption func(*DirectMessageMutation)

// newDirectMessageMutation creates new mutation for the DirectMessage entity.
func newDirectMessageMutation(c config, op Op, opts ...directmessageOption) *DirectMessageMutation {
	m := &DirectMessageMutation{
		config:        c,
		op:            op,
		typ:           TypeDirectMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDirectMessageID sets the ID field of the mutation.
func withDirectMessageID(id int) directmessageOption {
	return func(m *DirectMessageMutation) {
		var (
			err   error
			once  sync.Once
			value *DirectMessage
		)
		m.oldValue = func(ctx context.Context) (*DirectMessage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DirectMessage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDirectMessage sets the old DirectMessage of the mutation.
func withDirectMessage(node *DirectMessage) directmessageOption {
	return func(m *DirectMessageMutation) {
		m.oldValue = func(context.Context) (*DirectMessage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DirectMessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DirectMessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DirectMessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DirectMessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DirectMessage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetContent sets the "content" field.
func (m *DirectMessageMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *DirectMessageMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the DirectMessage entity.
// If the DirectMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirectMessageMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *DirectMessageMutation) ResetContent() {
	m.content = nil
}

// SetSentAt sets the "sent_at" field.
func (m *DirectMessageMutation) SetSentAt(t time.Time) {
	m.sent_at = &t
}

// SentAt returns the value of the "sent_at" field in the mutation.
func (m *DirectMessageMutation) SentAt() (r time.Time, exists bool) {
	v := m.sent_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSentAt returns the old "sent_at" field's value of the DirectMessage entity.
// If the DirectMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirectMessageMutation) OldSentAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSentAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSentAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSentAt: %w", err)
	}
	return oldValue.SentAt, nil
}

// ResetSentAt resets all changes to the "sent_at" field.
func (m *DirectMessageMutation) ResetSentAt() {
	m.sent_at = nil
}

// SetReadAt sets the "read_at" field.
func (m *DirectMessageMutation) SetReadAt(t time.Time) {
	m.read_at = &t
}

// ReadAt returns the value of the "read_at" field in the mutation.
func (m *DirectMessageMutation) ReadAt() (r time.Time, exists bool) {
	v := m.read_at
	if v == nil {
		return
	}
	return *v, true
}

// OldReadAt returns the old "read_at" field's value of the DirectMessage entity.
// If the DirectMessage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DirectMessageMutation) OldReadAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReadAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReadAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReadAt: %w", err)
	}
	return oldValue.ReadAt, nil
}

// ClearReadAt clears the value of the "read_at" field.
func (m *DirectMessageMutation) ClearReadAt() {
	m.read_at = nil
	m.clearedFields[directmessage.FieldReadAt] = struct{}{}
}

// ReadAtCleared returns if the "read_at" field was cleared in this mutation.
func (m *DirectMessageMutation) ReadAtCleared() bool {
	_, ok := m.clearedFields[directmessage.FieldReadAt]
	return ok
}

// ResetReadAt resets all changes to the "read_at" field.
func (m *DirectMessageMutation) ResetReadAt() {
	m.read_at = nil
	delete(m.clearedFields, directmessage.FieldReadAt)
}

// SetSenderID sets the "sender" edge to the User entity by id.
func (m *DirectMessageMutation) SetSenderID(id int) {
	m.sender = &id
}

// ClearSender clears the "sender" edge to the User entity.
func (m *DirectMessageMutation) ClearSender() {
	m.clearedsender = true
}

// SenderCleared reports if the "sender" edge to the User entity was cleared.
func (m *DirectMessageMutation) SenderCleared() bool {
	return m.clearedsender
}

// SenderID returns the "sender" edge ID in the mutation.
func (m *DirectMessageMutation) SenderID() (id int, exists bool) {
	if m.sender != nil {
		return *m.sender, true
	}
	return
}

// SenderIDs returns the "sender" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SenderID instead. It exists only for internal usage by the builders.
func (m *DirectMessageMutation) SenderIDs() (ids []int) {
	if id := m.sender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSender resets all changes to the "sender" edge.
func (m *DirectMessageMutation) ResetSender() {
	m.sender = nil
	m.clearedsender = false
}

// SetReceiverID sets the "receiver" edge to the User entity by id.
func (m *DirectMessageMutation) SetReceiverID(id int) {
	m.receiver = &id
}

// ClearReceiver clears the "receiver" edge to the User entity.
func (m *DirectMessageMutation) ClearReceiver() {
	m.clearedreceiver = true
}

// ReceiverCleared reports if the "receiver" edge to the User entity was cleared.
func (m *DirectMessageMutation) ReceiverCleared() bool {
	return m.clearedreceiver
}

// ReceiverID returns the "receiver" edge ID in the mutation.
func (m *DirectMessageMutation) ReceiverID() (id int, exists bool) {
	if m.receiver != nil {
		return *m.receiver, true
	}
	return
}

// ReceiverIDs returns the "receiver" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ReceiverID instead. It exists only for internal usage by the builders.
func (m *DirectMessageMutation) ReceiverIDs() (ids []int) {
	if id := m.receiver; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetReceiver resets all changes to the "receiver" edge.
func (m *DirectMessageMutation) ResetReceiver() {
	m.receiver = nil
	m.clearedreceiver = false
}

// Where appends a list predicates to the DirectMessageMutation builder.
func (m *DirectMessageMutation) Where(ps ...predicate.DirectMessage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DirectMessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DirectMessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DirectMessage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DirectMessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DirectMessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DirectMessage).
func (m *DirectMessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DirectMessageMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.content != nil {
		fields = append(fields, directmessage.FieldContent)
	}
	if m.sent_at != nil {
		fields = append(fields, directmessage.FieldSentAt)
	}
	if m.read_at != nil {
		fields = append(fields, directmessage.FieldReadAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DirectMessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case directmessage.FieldContent:
		return m.Content()
	case directmessage.FieldSentAt:
		return m.SentAt()
	case directmessage.FieldReadAt:
		return m.ReadAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DirectMessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case directmessage.FieldContent:
		return m.OldContent(ctx)
	case directmessage.FieldSentAt:
		return m.OldSentAt(ctx)
	case directmessage.FieldReadAt:
		return m.OldReadAt(ctx)
	}
	return nil, fmt.Errorf("unknown DirectMessage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DirectMessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case directmessage.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case directmessage.FieldSentAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSentAt(v)
		return nil
	case directmessage.FieldReadAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReadAt(v)
		return nil
	}
	return fmt.Errorf("unknown DirectMessage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DirectMessageMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DirectMessageMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DirectMessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DirectMessage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DirectMessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(directmessage.FieldReadAt) {
		fields = append(fields, directmessage.FieldReadAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DirectMessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DirectMessageMutation) ClearField(name string) error {
	switch name {
	case directmessage.FieldReadAt:
		m.ClearReadAt()
		return nil
	}
	return fmt.Errorf("unknown DirectMessage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DirectMessageMutation) ResetField(name string) error {
	switch name {
	case directmessage.FieldContent:
		m.ResetContent()
		return nil
	case directmessage.FieldSentAt:
		m.ResetSentAt()
		return nil
	case directmessage.FieldReadAt:
		m.ResetReadAt()
		return nil
	}
	return fmt.Errorf("unknown DirectMessage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DirectMessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.sender != nil {
		edges = append(edges, directmessage.EdgeSender)
	}
	if m.receiver != nil {
		edges = append(edges, directmessage.EdgeReceiver)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DirectMessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case directmessage.EdgeSender:
		if id := m.sender; id != nil {
			return []ent.Value{*id}
		}
	case directmessage.EdgeReceiver:
		if id := m.receiver; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DirectMessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DirectMessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DirectMessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsender {
		edges = append(edges, directmessage.EdgeSender)
	}
	if m.clearedreceiver {
		edges = append(edges, directmessage.EdgeReceiver)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DirectMessageMutation) EdgeCleared(name string) bool {
	switch name {
	case directmessage.EdgeSender:
		return m.clearedsender
	case directmessage.EdgeReceiver:
		return m.clearedreceiver
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DirectMessageMutation) ClearEdge(name string) error {
	switch name {
	case directmessage.EdgeSender:
		m.ClearSender()
		return nil
	case directmessage.EdgeReceiver:
		m.ClearReceiver()
		return nil
	}
	return fmt.Errorf("unknown DirectMessage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DirectMessageMutation) ResetEdge(name string) error {
	switch name {
	case directmessage.EdgeSender:
		m.ResetSender()
		return nil
	case directmessage.EdgeReceiver:
		m.ResetReceiver()
		return nil
	}
	return fmt.Errorf("unknown DirectMessage edge %s", name)
}

// HashtagMutation represents an operation that mutates the Hashtag nodes in the graph.
type HashtagMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	clearedFields map[string]struct{}
	tweets        map[int]struct{}
	removedtweets map[int]struct{}
	clearedtweets bool
	done          bool
	oldValue      func(context.Context) (*Hashtag, error)
	predicates    []predicate.Hashtag
}

var _ ent.Mutation = (*HashtagMutation)(nil)

// hashtagOption allows management of the mutation configuration using functional options.
type hashtagOption func(*HashtagMutation)

// newHashtagMutation creates new mutation for the Hashtag entity.
func newHashtagMutation(c config, op Op, opts ...hashtagOption) *HashtagMutation {
	m := &HashtagMutation{
		config:        c,
		op:            op,
		typ:           TypeHashtag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withHashtagID sets the ID field of the mutation.
func withHashtagID(id int) hashtagOption {
	return func(m *HashtagMutation) {
		var (
			err   error
			once  sync.Once
			value *Hashtag
		)
		m.oldValue = func(ctx context.Context) (*Hashtag, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Hashtag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withHashtag sets the old Hashtag of the mutation.
func withHashtag(node *Hashtag) hashtagOption {
	return func(m *HashtagMutation) {
		m.oldValue = func(context.Context) (*Hashtag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m HashtagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m HashtagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *HashtagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *HashtagMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Hashtag.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *HashtagMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *HashtagMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Hashtag entity.
// If the Hashtag object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *HashtagMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *HashtagMutation) ResetName() {
	m.name = nil
}

// AddTweetIDs adds the "tweets" edge to the Tweet entity by ids.
func (m *HashtagMutation) AddTweetIDs(ids ...int) {
	if m.tweets == nil {
		m.tweets = make(map[int]struct{})
	}
	for i := range ids {
		m.tweets[ids[i]] = struct{}{}
	}
}

// ClearTweets clears the "tweets" edge to the Tweet entity.
func (m *HashtagMutation) ClearTweets() {
	m.clearedtweets = true
}

// TweetsCleared reports if the "tweets" edge to the Tweet entity was cleared.
func (m *HashtagMutation) TweetsCleared() bool {
	return m.clearedtweets
}

// RemoveTweetIDs removes the "tweets" edge to the Tweet entity by IDs.
func (m *HashtagMutation) RemoveTweetIDs(ids ...int) {
	if m.removedtweets == nil {
		m.removedtweets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tweets, ids[i])
		m.removedtweets[ids[i]] = struct{}{}
	}
}

// RemovedTweets returns the removed IDs of the "tweets" edge to the Tweet entity.
func (m *HashtagMutation) RemovedTweetsIDs() (ids []int) {
	for id := range m.removedtweets {
		ids = append(ids, id)
	}
	return
}

// TweetsIDs returns the "tweets" edge IDs in the mutation.
func (m *HashtagMutation) TweetsIDs() (ids []int) {
	for id := range m.tweets {
		ids = append(ids, id)
	}
	return
}

// ResetTweets resets all changes to the "tweets" edge.
func (m *HashtagMutation) ResetTweets() {
	m.tweets = nil
	m.clearedtweets = false
	m.removedtweets = nil
}

// Where appends a list predicates to the HashtagMutation builder.
func (m *HashtagMutation) Where(ps ...predicate.Hashtag) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the HashtagMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *HashtagMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Hashtag, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *HashtagMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *HashtagMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Hashtag).
func (m *HashtagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *HashtagMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, hashtag.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *HashtagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case hashtag.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *HashtagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case hashtag.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Hashtag field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HashtagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case hashtag.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Hashtag field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *HashtagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *HashtagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *HashtagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Hashtag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *HashtagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *HashtagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *HashtagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Hashtag nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *HashtagMutation) ResetField(name string) error {
	switch name {
	case hashtag.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Hashtag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *HashtagMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.tweets != nil {
		edges = append(edges, hashtag.EdgeTweets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *HashtagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case hashtag.EdgeTweets:
		ids := make([]ent.Value, 0, len(m.tweets))
		for id := range m.tweets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *HashtagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtweets != nil {
		edges = append(edges, hashtag.EdgeTweets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *HashtagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case hashtag.EdgeTweets:
		ids := make([]ent.Value, 0, len(m.removedtweets))
		for id := range m.removedtweets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *HashtagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtweets {
		edges = append(edges, hashtag.EdgeTweets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *HashtagMutation) EdgeCleared(name string) bool {
	switch name {
	case hashtag.EdgeTweets:
		return m.clearedtweets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *HashtagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Hashtag unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *HashtagMutation) ResetEdge(name string) error {
	switch name {
	case hashtag.EdgeTweets:
		m.ResetTweets()
		return nil
	}
	return fmt.Errorf("unknown Hashtag edge %s", name)
}

// NotificationMutation represents an operation that mutates the Notification nodes in the graph.
type NotificationMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	_type                *notification.Type
	created_at           *time.Time
	read_at              *time.Time
	clearedFields        map[string]struct{}
	user                 *int
	cleareduser          bool
	related_tweet        *int
	clearedrelated_tweet bool
	related_user         *int
	clearedrelated_user  bool
	done                 bool
	oldValue             func(context.Context) (*Notification, error)
	predicates           []predicate.Notification
}

var _ ent.Mutation = (*NotificationMutation)(nil)

// notificationOption allows management of the mutation configuration using functional options.
type notificationOption func(*NotificationMutation)

// newNotificationMutation creates new mutation for the Notification entity.
func newNotificationMutation(c config, op Op, opts ...notificationOption) *NotificationMutation {
	m := &NotificationMutation{
		config:        c,
		op:            op,
		typ:           TypeNotification,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNotificationID sets the ID field of the mutation.
func withNotificationID(id int) notificationOption {
	return func(m *NotificationMutation) {
		var (
			err   error
			once  sync.Once
			value *Notification
		)
		m.oldValue = func(ctx context.Context) (*Notification, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Notification.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNotification sets the old Notification of the mutation.
func withNotification(node *Notification) notificationOption {
	return func(m *NotificationMutation) {
		m.oldValue = func(context.Context) (*Notification, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NotificationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NotificationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NotificationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NotificationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Notification.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *NotificationMutation) SetType(n notification.Type) {
	m._type = &n
}

// GetType returns the value of the "type" field in the mutation.
func (m *NotificationMutation) GetType() (r notification.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldType(ctx context.Context) (v notification.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *NotificationMutation) ResetType() {
	m._type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *NotificationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *NotificationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *NotificationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetReadAt sets the "read_at" field.
func (m *NotificationMutation) SetReadAt(t time.Time) {
	m.read_at = &t
}

// ReadAt returns the value of the "read_at" field in the mutation.
func (m *NotificationMutation) ReadAt() (r time.Time, exists bool) {
	v := m.read_at
	if v == nil {
		return
	}
	return *v, true
}

// OldReadAt returns the old "read_at" field's value of the Notification entity.
// If the Notification object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NotificationMutation) OldReadAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReadAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReadAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReadAt: %w", err)
	}
	return oldValue.ReadAt, nil
}

// ClearReadAt clears the value of the "read_at" field.
func (m *NotificationMutation) ClearReadAt() {
	m.read_at = nil
	m.clearedFields[notification.FieldReadAt] = struct{}{}
}

// ReadAtCleared returns if the "read_at" field was cleared in this mutation.
func (m *NotificationMutation) ReadAtCleared() bool {
	_, ok := m.clearedFields[notification.FieldReadAt]
	return ok
}

// ResetReadAt resets all changes to the "read_at" field.
func (m *NotificationMutation) ResetReadAt() {
	m.read_at = nil
	delete(m.clearedFields, notification.FieldReadAt)
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *NotificationMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *NotificationMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *NotificationMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *NotificationMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *NotificationMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *NotificationMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetRelatedTweetID sets the "related_tweet" edge to the Tweet entity by id.
func (m *NotificationMutation) SetRelatedTweetID(id int) {
	m.related_tweet = &id
}

// ClearRelatedTweet clears the "related_tweet" edge to the Tweet entity.
func (m *NotificationMutation) ClearRelatedTweet() {
	m.clearedrelated_tweet = true
}

// RelatedTweetCleared reports if the "related_tweet" edge to the Tweet entity was cleared.
func (m *NotificationMutation) RelatedTweetCleared() bool {
	return m.clearedrelated_tweet
}

// RelatedTweetID returns the "related_tweet" edge ID in the mutation.
func (m *NotificationMutation) RelatedTweetID() (id int, exists bool) {
	if m.related_tweet != nil {
		return *m.related_tweet, true
	}
	return
}

// RelatedTweetIDs returns the "related_tweet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RelatedTweetID instead. It exists only for internal usage by the builders.
func (m *NotificationMutation) RelatedTweetIDs() (ids []int) {
	if id := m.related_tweet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRelatedTweet resets all changes to the "related_tweet" edge.
func (m *NotificationMutation) ResetRelatedTweet() {
	m.related_tweet = nil
	m.clearedrelated_tweet = false
}

// SetRelatedUserID sets the "related_user" edge to the User entity by id.
func (m *NotificationMutation) SetRelatedUserID(id int) {
	m.related_user = &id
}

// ClearRelatedUser clears the "related_user" edge to the User entity.
func (m *NotificationMutation) ClearRelatedUser() {
	m.clearedrelated_user = true
}

// RelatedUserCleared reports if the "related_user" edge to the User entity was cleared.
func (m *NotificationMutation) RelatedUserCleared() bool {
	return m.clearedrelated_user
}

// RelatedUserID returns the "related_user" edge ID in the mutation.
func (m *NotificationMutation) RelatedUserID() (id int, exists bool) {
	if m.related_user != nil {
		return *m.related_user, true
	}
	return
}

// RelatedUserIDs returns the "related_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RelatedUserID instead. It exists only for internal usage by the builders.
func (m *NotificationMutation) RelatedUserIDs() (ids []int) {
	if id := m.related_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRelatedUser resets all changes to the "related_user" edge.
func (m *NotificationMutation) ResetRelatedUser() {
	m.related_user = nil
	m.clearedrelated_user = false
}

// Where appends a list predicates to the NotificationMutation builder.
func (m *NotificationMutation) Where(ps ...predicate.Notification) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NotificationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NotificationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Notification, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NotificationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NotificationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Notification).
func (m *NotificationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NotificationMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._type != nil {
		fields = append(fields, notification.FieldType)
	}
	if m.created_at != nil {
		fields = append(fields, notification.FieldCreatedAt)
	}
	if m.read_at != nil {
		fields = append(fields, notification.FieldReadAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NotificationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case notification.FieldType:
		return m.GetType()
	case notification.FieldCreatedAt:
		return m.CreatedAt()
	case notification.FieldReadAt:
		return m.ReadAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NotificationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case notification.FieldType:
		return m.OldType(ctx)
	case notification.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case notification.FieldReadAt:
		return m.OldReadAt(ctx)
	}
	return nil, fmt.Errorf("unknown Notification field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case notification.FieldType:
		v, ok := value.(notification.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case notification.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case notification.FieldReadAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReadAt(v)
		return nil
	}
	return fmt.Errorf("unknown Notification field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NotificationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NotificationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NotificationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Notification numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NotificationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(notification.FieldReadAt) {
		fields = append(fields, notification.FieldReadAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NotificationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NotificationMutation) ClearField(name string) error {
	switch name {
	case notification.FieldReadAt:
		m.ClearReadAt()
		return nil
	}
	return fmt.Errorf("unknown Notification nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NotificationMutation) ResetField(name string) error {
	switch name {
	case notification.FieldType:
		m.ResetType()
		return nil
	case notification.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case notification.FieldReadAt:
		m.ResetReadAt()
		return nil
	}
	return fmt.Errorf("unknown Notification field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NotificationMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, notification.EdgeUser)
	}
	if m.related_tweet != nil {
		edges = append(edges, notification.EdgeRelatedTweet)
	}
	if m.related_user != nil {
		edges = append(edges, notification.EdgeRelatedUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NotificationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case notification.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case notification.EdgeRelatedTweet:
		if id := m.related_tweet; id != nil {
			return []ent.Value{*id}
		}
	case notification.EdgeRelatedUser:
		if id := m.related_user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NotificationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NotificationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NotificationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, notification.EdgeUser)
	}
	if m.clearedrelated_tweet {
		edges = append(edges, notification.EdgeRelatedTweet)
	}
	if m.clearedrelated_user {
		edges = append(edges, notification.EdgeRelatedUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NotificationMutation) EdgeCleared(name string) bool {
	switch name {
	case notification.EdgeUser:
		return m.cleareduser
	case notification.EdgeRelatedTweet:
		return m.clearedrelated_tweet
	case notification.EdgeRelatedUser:
		return m.clearedrelated_user
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NotificationMutation) ClearEdge(name string) error {
	switch name {
	case notification.EdgeUser:
		m.ClearUser()
		return nil
	case notification.EdgeRelatedTweet:
		m.ClearRelatedTweet()
		return nil
	case notification.EdgeRelatedUser:
		m.ClearRelatedUser()
		return nil
	}
	return fmt.Errorf("unknown Notification unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NotificationMutation) ResetEdge(name string) error {
	switch name {
	case notification.EdgeUser:
		m.ResetUser()
		return nil
	case notification.EdgeRelatedTweet:
		m.ResetRelatedTweet()
		return nil
	case notification.EdgeRelatedUser:
		m.ResetRelatedUser()
		return nil
	}
	return fmt.Errorf("unknown Notification edge %s", name)
}

// TweetMutation represents an operation that mutates the Tweet nodes in the graph.
type TweetMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	content             *string
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	author              *int
	clearedauthor       bool
	liked_by            map[int]struct{}
	removedliked_by     map[int]struct{}
	clearedliked_by     bool
	retweeted_by        map[int]struct{}
	removedretweeted_by map[int]struct{}
	clearedretweeted_by bool
	parent_tweet        *int
	clearedparent_tweet bool
	replies             map[int]struct{}
	removedreplies      map[int]struct{}
	clearedreplies      bool
	mentions            map[int]struct{}
	removedmentions     map[int]struct{}
	clearedmentions     bool
	hashtags            map[int]struct{}
	removedhashtags     map[int]struct{}
	clearedhashtags     bool
	done                bool
	oldValue            func(context.Context) (*Tweet, error)
	predicates          []predicate.Tweet
}

var _ ent.Mutation = (*TweetMutation)(nil)

// tweetOption allows management of the mutation configuration using functional options.
type tweetOption func(*TweetMutation)

// newTweetMutation creates new mutation for the Tweet entity.
func newTweetMutation(c config, op Op, opts ...tweetOption) *TweetMutation {
	m := &TweetMutation{
		config:        c,
		op:            op,
		typ:           TypeTweet,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTweetID sets the ID field of the mutation.
func withTweetID(id int) tweetOption {
	return func(m *TweetMutation) {
		var (
			err   error
			once  sync.Once
			value *Tweet
		)
		m.oldValue = func(ctx context.Context) (*Tweet, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tweet.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTweet sets the old Tweet of the mutation.
func withTweet(node *Tweet) tweetOption {
	return func(m *TweetMutation) {
		m.oldValue = func(context.Context) (*Tweet, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TweetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TweetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TweetMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TweetMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tweet.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetContent sets the "content" field.
func (m *TweetMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *TweetMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *TweetMutation) ResetContent() {
	m.content = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *TweetMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TweetMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TweetMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TweetMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TweetMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Tweet entity.
// If the Tweet object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TweetMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TweetMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *TweetMutation) SetAuthorID(id int) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *TweetMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *TweetMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *TweetMutation) AuthorID() (id int, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *TweetMutation) AuthorIDs() (ids []int) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *TweetMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// AddLikedByIDs adds the "liked_by" edge to the User entity by ids.
func (m *TweetMutation) AddLikedByIDs(ids ...int) {
	if m.liked_by == nil {
		m.liked_by = make(map[int]struct{})
	}
	for i := range ids {
		m.liked_by[ids[i]] = struct{}{}
	}
}

// ClearLikedBy clears the "liked_by" edge to the User entity.
func (m *TweetMutation) ClearLikedBy() {
	m.clearedliked_by = true
}

// LikedByCleared reports if the "liked_by" edge to the User entity was cleared.
func (m *TweetMutation) LikedByCleared() bool {
	return m.clearedliked_by
}

// RemoveLikedByIDs removes the "liked_by" edge to the User entity by IDs.
func (m *TweetMutation) RemoveLikedByIDs(ids ...int) {
	if m.removedliked_by == nil {
		m.removedliked_by = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.liked_by, ids[i])
		m.removedliked_by[ids[i]] = struct{}{}
	}
}

// RemovedLikedBy returns the removed IDs of the "liked_by" edge to the User entity.
func (m *TweetMutation) RemovedLikedByIDs() (ids []int) {
	for id := range m.removedliked_by {
		ids = append(ids, id)
	}
	return
}

// LikedByIDs returns the "liked_by" edge IDs in the mutation.
func (m *TweetMutation) LikedByIDs() (ids []int) {
	for id := range m.liked_by {
		ids = append(ids, id)
	}
	return
}

// ResetLikedBy resets all changes to the "liked_by" edge.
func (m *TweetMutation) ResetLikedBy() {
	m.liked_by = nil
	m.clearedliked_by = false
	m.removedliked_by = nil
}

// AddRetweetedByIDs adds the "retweeted_by" edge to the User entity by ids.
func (m *TweetMutation) AddRetweetedByIDs(ids ...int) {
	if m.retweeted_by == nil {
		m.retweeted_by = make(map[int]struct{})
	}
	for i := range ids {
		m.retweeted_by[ids[i]] = struct{}{}
	}
}

// ClearRetweetedBy clears the "retweeted_by" edge to the User entity.
func (m *TweetMutation) ClearRetweetedBy() {
	m.clearedretweeted_by = true
}

// RetweetedByCleared reports if the "retweeted_by" edge to the User entity was cleared.
func (m *TweetMutation) RetweetedByCleared() bool {
	return m.clearedretweeted_by
}

// RemoveRetweetedByIDs removes the "retweeted_by" edge to the User entity by IDs.
func (m *TweetMutation) RemoveRetweetedByIDs(ids ...int) {
	if m.removedretweeted_by == nil {
		m.removedretweeted_by = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.retweeted_by, ids[i])
		m.removedretweeted_by[ids[i]] = struct{}{}
	}
}

// RemovedRetweetedBy returns the removed IDs of the "retweeted_by" edge to the User entity.
func (m *TweetMutation) RemovedRetweetedByIDs() (ids []int) {
	for id := range m.removedretweeted_by {
		ids = append(ids, id)
	}
	return
}

// RetweetedByIDs returns the "retweeted_by" edge IDs in the mutation.
func (m *TweetMutation) RetweetedByIDs() (ids []int) {
	for id := range m.retweeted_by {
		ids = append(ids, id)
	}
	return
}

// ResetRetweetedBy resets all changes to the "retweeted_by" edge.
func (m *TweetMutation) ResetRetweetedBy() {
	m.retweeted_by = nil
	m.clearedretweeted_by = false
	m.removedretweeted_by = nil
}

// SetParentTweetID sets the "parent_tweet" edge to the Tweet entity by id.
func (m *TweetMutation) SetParentTweetID(id int) {
	m.parent_tweet = &id
}

// ClearParentTweet clears the "parent_tweet" edge to the Tweet entity.
func (m *TweetMutation) ClearParentTweet() {
	m.clearedparent_tweet = true
}

// ParentTweetCleared reports if the "parent_tweet" edge to the Tweet entity was cleared.
func (m *TweetMutation) ParentTweetCleared() bool {
	return m.clearedparent_tweet
}

// ParentTweetID returns the "parent_tweet" edge ID in the mutation.
func (m *TweetMutation) ParentTweetID() (id int, exists bool) {
	if m.parent_tweet != nil {
		return *m.parent_tweet, true
	}
	return
}

// ParentTweetIDs returns the "parent_tweet" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentTweetID instead. It exists only for internal usage by the builders.
func (m *TweetMutation) ParentTweetIDs() (ids []int) {
	if id := m.parent_tweet; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParentTweet resets all changes to the "parent_tweet" edge.
func (m *TweetMutation) ResetParentTweet() {
	m.parent_tweet = nil
	m.clearedparent_tweet = false
}

// AddReplyIDs adds the "replies" edge to the Tweet entity by ids.
func (m *TweetMutation) AddReplyIDs(ids ...int) {
	if m.replies == nil {
		m.replies = make(map[int]struct{})
	}
	for i := range ids {
		m.replies[ids[i]] = struct{}{}
	}
}

// ClearReplies clears the "replies" edge to the Tweet entity.
func (m *TweetMutation) ClearReplies() {
	m.clearedreplies = true
}

// RepliesCleared reports if the "replies" edge to the Tweet entity was cleared.
func (m *TweetMutation) RepliesCleared() bool {
	return m.clearedreplies
}

// RemoveReplyIDs removes the "replies" edge to the Tweet entity by IDs.
func (m *TweetMutation) RemoveReplyIDs(ids ...int) {
	if m.removedreplies == nil {
		m.removedreplies = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.replies, ids[i])
		m.removedreplies[ids[i]] = struct{}{}
	}
}

// RemovedReplies returns the removed IDs of the "replies" edge to the Tweet entity.
func (m *TweetMutation) RemovedRepliesIDs() (ids []int) {
	for id := range m.removedreplies {
		ids = append(ids, id)
	}
	return
}

// RepliesIDs returns the "replies" edge IDs in the mutation.
func (m *TweetMutation) RepliesIDs() (ids []int) {
	for id := range m.replies {
		ids = append(ids, id)
	}
	return
}

// ResetReplies resets all changes to the "replies" edge.
func (m *TweetMutation) ResetReplies() {
	m.replies = nil
	m.clearedreplies = false
	m.removedreplies = nil
}

// AddMentionIDs adds the "mentions" edge to the User entity by ids.
func (m *TweetMutation) AddMentionIDs(ids ...int) {
	if m.mentions == nil {
		m.mentions = make(map[int]struct{})
	}
	for i := range ids {
		m.mentions[ids[i]] = struct{}{}
	}
}

// ClearMentions clears the "mentions" edge to the User entity.
func (m *TweetMutation) ClearMentions() {
	m.clearedmentions = true
}

// MentionsCleared reports if the "mentions" edge to the User entity was cleared.
func (m *TweetMutation) MentionsCleared() bool {
	return m.clearedmentions
}

// RemoveMentionIDs removes the "mentions" edge to the User entity by IDs.
func (m *TweetMutation) RemoveMentionIDs(ids ...int) {
	if m.removedmentions == nil {
		m.removedmentions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.mentions, ids[i])
		m.removedmentions[ids[i]] = struct{}{}
	}
}

// RemovedMentions returns the removed IDs of the "mentions" edge to the User entity.
func (m *TweetMutation) RemovedMentionsIDs() (ids []int) {
	for id := range m.removedmentions {
		ids = append(ids, id)
	}
	return
}

// MentionsIDs returns the "mentions" edge IDs in the mutation.
func (m *TweetMutation) MentionsIDs() (ids []int) {
	for id := range m.mentions {
		ids = append(ids, id)
	}
	return
}

// ResetMentions resets all changes to the "mentions" edge.
func (m *TweetMutation) ResetMentions() {
	m.mentions = nil
	m.clearedmentions = false
	m.removedmentions = nil
}

// AddHashtagIDs adds the "hashtags" edge to the Hashtag entity by ids.
func (m *TweetMutation) AddHashtagIDs(ids ...int) {
	if m.hashtags == nil {
		m.hashtags = make(map[int]struct{})
	}
	for i := range ids {
		m.hashtags[ids[i]] = struct{}{}
	}
}

// ClearHashtags clears the "hashtags" edge to the Hashtag entity.
func (m *TweetMutation) ClearHashtags() {
	m.clearedhashtags = true
}

// HashtagsCleared reports if the "hashtags" edge to the Hashtag entity was cleared.
func (m *TweetMutation) HashtagsCleared() bool {
	return m.clearedhashtags
}

// RemoveHashtagIDs removes the "hashtags" edge to the Hashtag entity by IDs.
func (m *TweetMutation) RemoveHashtagIDs(ids ...int) {
	if m.removedhashtags == nil {
		m.removedhashtags = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.hashtags, ids[i])
		m.removedhashtags[ids[i]] = struct{}{}
	}
}

// RemovedHashtags returns the removed IDs of the "hashtags" edge to the Hashtag entity.
func (m *TweetMutation) RemovedHashtagsIDs() (ids []int) {
	for id := range m.removedhashtags {
		ids = append(ids, id)
	}
	return
}

// HashtagsIDs returns the "hashtags" edge IDs in the mutation.
func (m *TweetMutation) HashtagsIDs() (ids []int) {
	for id := range m.hashtags {
		ids = append(ids, id)
	}
	return
}

// ResetHashtags resets all changes to the "hashtags" edge.
func (m *TweetMutation) ResetHashtags() {
	m.hashtags = nil
	m.clearedhashtags = false
	m.removedhashtags = nil
}

// Where appends a list predicates to the TweetMutation builder.
func (m *TweetMutation) Where(ps ...predicate.Tweet) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TweetMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TweetMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Tweet, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TweetMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TweetMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Tweet).
func (m *TweetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TweetMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.content != nil {
		fields = append(fields, tweet.FieldContent)
	}
	if m.created_at != nil {
		fields = append(fields, tweet.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, tweet.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TweetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tweet.FieldContent:
		return m.Content()
	case tweet.FieldCreatedAt:
		return m.CreatedAt()
	case tweet.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TweetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tweet.FieldContent:
		return m.OldContent(ctx)
	case tweet.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case tweet.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Tweet field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TweetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tweet.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case tweet.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case tweet.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Tweet field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TweetMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TweetMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TweetMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tweet numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TweetMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TweetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TweetMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tweet nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TweetMutation) ResetField(name string) error {
	switch name {
	case tweet.FieldContent:
		m.ResetContent()
		return nil
	case tweet.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case tweet.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Tweet field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TweetMutation) AddedEdges() []string {
	edges := make([]string, 0, 7)
	if m.author != nil {
		edges = append(edges, tweet.EdgeAuthor)
	}
	if m.liked_by != nil {
		edges = append(edges, tweet.EdgeLikedBy)
	}
	if m.retweeted_by != nil {
		edges = append(edges, tweet.EdgeRetweetedBy)
	}
	if m.parent_tweet != nil {
		edges = append(edges, tweet.EdgeParentTweet)
	}
	if m.replies != nil {
		edges = append(edges, tweet.EdgeReplies)
	}
	if m.mentions != nil {
		edges = append(edges, tweet.EdgeMentions)
	}
	if m.hashtags != nil {
		edges = append(edges, tweet.EdgeHashtags)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TweetMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tweet.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case tweet.EdgeLikedBy:
		ids := make([]ent.Value, 0, len(m.liked_by))
		for id := range m.liked_by {
			ids = append(ids, id)
		}
		return ids
	case tweet.EdgeRetweetedBy:
		ids := make([]ent.Value, 0, len(m.retweeted_by))
		for id := range m.retweeted_by {
			ids = append(ids, id)
		}
		return ids
	case tweet.EdgeParentTweet:
		if id := m.parent_tweet; id != nil {
			return []ent.Value{*id}
		}
	case tweet.EdgeReplies:
		ids := make([]ent.Value, 0, len(m.replies))
		for id := range m.replies {
			ids = append(ids, id)
		}
		return ids
	case tweet.EdgeMentions:
		ids := make([]ent.Value, 0, len(m.mentions))
		for id := range m.mentions {
			ids = append(ids, id)
		}
		return ids
	case tweet.EdgeHashtags:
		ids := make([]ent.Value, 0, len(m.hashtags))
		for id := range m.hashtags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TweetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 7)
	if m.removedliked_by != nil {
		edges = append(edges, tweet.EdgeLikedBy)
	}
	if m.removedretweeted_by != nil {
		edges = append(edges, tweet.EdgeRetweetedBy)
	}
	if m.removedreplies != nil {
		edges = append(edges, tweet.EdgeReplies)
	}
	if m.removedmentions != nil {
		edges = append(edges, tweet.EdgeMentions)
	}
	if m.removedhashtags != nil {
		edges = append(edges, tweet.EdgeHashtags)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TweetMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tweet.EdgeLikedBy:
		ids := make([]ent.Value, 0, len(m.removedliked_by))
		for id := range m.removedliked_by {
			ids = append(ids, id)
		}
		return ids
	case tweet.EdgeRetweetedBy:
		ids := make([]ent.Value, 0, len(m.removedretweeted_by))
		for id := range m.removedretweeted_by {
			ids = append(ids, id)
		}
		return ids
	case tweet.EdgeReplies:
		ids := make([]ent.Value, 0, len(m.removedreplies))
		for id := range m.removedreplies {
			ids = append(ids, id)
		}
		return ids
	case tweet.EdgeMentions:
		ids := make([]ent.Value, 0, len(m.removedmentions))
		for id := range m.removedmentions {
			ids = append(ids, id)
		}
		return ids
	case tweet.EdgeHashtags:
		ids := make([]ent.Value, 0, len(m.removedhashtags))
		for id := range m.removedhashtags {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TweetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 7)
	if m.clearedauthor {
		edges = append(edges, tweet.EdgeAuthor)
	}
	if m.clearedliked_by {
		edges = append(edges, tweet.EdgeLikedBy)
	}
	if m.clearedretweeted_by {
		edges = append(edges, tweet.EdgeRetweetedBy)
	}
	if m.clearedparent_tweet {
		edges = append(edges, tweet.EdgeParentTweet)
	}
	if m.clearedreplies {
		edges = append(edges, tweet.EdgeReplies)
	}
	if m.clearedmentions {
		edges = append(edges, tweet.EdgeMentions)
	}
	if m.clearedhashtags {
		edges = append(edges, tweet.EdgeHashtags)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TweetMutation) EdgeCleared(name string) bool {
	switch name {
	case tweet.EdgeAuthor:
		return m.clearedauthor
	case tweet.EdgeLikedBy:
		return m.clearedliked_by
	case tweet.EdgeRetweetedBy:
		return m.clearedretweeted_by
	case tweet.EdgeParentTweet:
		return m.clearedparent_tweet
	case tweet.EdgeReplies:
		return m.clearedreplies
	case tweet.EdgeMentions:
		return m.clearedmentions
	case tweet.EdgeHashtags:
		return m.clearedhashtags
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TweetMutation) ClearEdge(name string) error {
	switch name {
	case tweet.EdgeAuthor:
		m.ClearAuthor()
		return nil
	case tweet.EdgeParentTweet:
		m.ClearParentTweet()
		return nil
	}
	return fmt.Errorf("unknown Tweet unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TweetMutation) ResetEdge(name string) error {
	switch name {
	case tweet.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case tweet.EdgeLikedBy:
		m.ResetLikedBy()
		return nil
	case tweet.EdgeRetweetedBy:
		m.ResetRetweetedBy()
		return nil
	case tweet.EdgeParentTweet:
		m.ResetParentTweet()
		return nil
	case tweet.EdgeReplies:
		m.ResetReplies()
		return nil
	case tweet.EdgeMentions:
		m.ResetMentions()
		return nil
	case tweet.EdgeHashtags:
		m.ResetHashtags()
		return nil
	}
	return fmt.Errorf("unknown Tweet edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	name                     *string
	email                    *string
	username                 *string
	password                 *string
	avatar                   *string
	metadata                 *map[string]interface{}
	created_at               *time.Time
	updated_at               *time.Time
	clearedFields            map[string]struct{}
	tweets                   map[int]struct{}
	removedtweets            map[int]struct{}
	clearedtweets            bool
	retweets                 map[int]struct{}
	removedretweets          map[int]struct{}
	clearedretweets          bool
	likes                    map[int]struct{}
	removedlikes             map[int]struct{}
	clearedlikes             bool
	followers                map[int]struct{}
	removedfollowers         map[int]struct{}
	clearedfollowers         bool
	following                map[int]struct{}
	removedfollowing         map[int]struct{}
	clearedfollowing         bool
	notifications            map[int]struct{}
	removednotifications     map[int]struct{}
	clearednotifications     bool
	sent_messages            map[int]struct{}
	removedsent_messages     map[int]struct{}
	clearedsent_messages     bool
	received_messages        map[int]struct{}
	removedreceived_messages map[int]struct{}
	clearedreceived_messages bool
	done                     bool
	oldValue                 func(context.Context) (*User, error)
	predicates               []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *UserMutation) ClearName() {
	m.name = nil
	m.clearedFields[user.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *UserMutation) NameCleared() bool {
	_, ok := m.clearedFields[user.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, user.FieldName)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ClearEmail clears the value of the "email" field.
func (m *UserMutation) ClearEmail() {
	m.email = nil
	m.clearedFields[user.FieldEmail] = struct{}{}
}

// EmailCleared returns if the "email" field was cleared in this mutation.
func (m *UserMutation) EmailCleared() bool {
	_, ok := m.clearedFields[user.FieldEmail]
	return ok
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
	delete(m.clearedFields, user.FieldEmail)
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *UserMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[user.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *UserMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[user.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, user.FieldPassword)
}

// SetAvatar sets the "avatar" field.
func (m *UserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *UserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ClearAvatar clears the value of the "avatar" field.
func (m *UserMutation) ClearAvatar() {
	m.avatar = nil
	m.clearedFields[user.FieldAvatar] = struct{}{}
}

// AvatarCleared returns if the "avatar" field was cleared in this mutation.
func (m *UserMutation) AvatarCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatar]
	return ok
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *UserMutation) ResetAvatar() {
	m.avatar = nil
	delete(m.clearedFields, user.FieldAvatar)
}

// SetMetadata sets the "metadata" field.
func (m *UserMutation) SetMetadata(value map[string]interface{}) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *UserMutation) Metadata() (r map[string]interface{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldMetadata(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *UserMutation) ResetMetadata() {
	m.metadata = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddTweetIDs adds the "tweets" edge to the Tweet entity by ids.
func (m *UserMutation) AddTweetIDs(ids ...int) {
	if m.tweets == nil {
		m.tweets = make(map[int]struct{})
	}
	for i := range ids {
		m.tweets[ids[i]] = struct{}{}
	}
}

// ClearTweets clears the "tweets" edge to the Tweet entity.
func (m *UserMutation) ClearTweets() {
	m.clearedtweets = true
}

// TweetsCleared reports if the "tweets" edge to the Tweet entity was cleared.
func (m *UserMutation) TweetsCleared() bool {
	return m.clearedtweets
}

// RemoveTweetIDs removes the "tweets" edge to the Tweet entity by IDs.
func (m *UserMutation) RemoveTweetIDs(ids ...int) {
	if m.removedtweets == nil {
		m.removedtweets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tweets, ids[i])
		m.removedtweets[ids[i]] = struct{}{}
	}
}

// RemovedTweets returns the removed IDs of the "tweets" edge to the Tweet entity.
func (m *UserMutation) RemovedTweetsIDs() (ids []int) {
	for id := range m.removedtweets {
		ids = append(ids, id)
	}
	return
}

// TweetsIDs returns the "tweets" edge IDs in the mutation.
func (m *UserMutation) TweetsIDs() (ids []int) {
	for id := range m.tweets {
		ids = append(ids, id)
	}
	return
}

// ResetTweets resets all changes to the "tweets" edge.
func (m *UserMutation) ResetTweets() {
	m.tweets = nil
	m.clearedtweets = false
	m.removedtweets = nil
}

// AddRetweetIDs adds the "retweets" edge to the Tweet entity by ids.
func (m *UserMutation) AddRetweetIDs(ids ...int) {
	if m.retweets == nil {
		m.retweets = make(map[int]struct{})
	}
	for i := range ids {
		m.retweets[ids[i]] = struct{}{}
	}
}

// ClearRetweets clears the "retweets" edge to the Tweet entity.
func (m *UserMutation) ClearRetweets() {
	m.clearedretweets = true
}

// RetweetsCleared reports if the "retweets" edge to the Tweet entity was cleared.
func (m *UserMutation) RetweetsCleared() bool {
	return m.clearedretweets
}

// RemoveRetweetIDs removes the "retweets" edge to the Tweet entity by IDs.
func (m *UserMutation) RemoveRetweetIDs(ids ...int) {
	if m.removedretweets == nil {
		m.removedretweets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.retweets, ids[i])
		m.removedretweets[ids[i]] = struct{}{}
	}
}

// RemovedRetweets returns the removed IDs of the "retweets" edge to the Tweet entity.
func (m *UserMutation) RemovedRetweetsIDs() (ids []int) {
	for id := range m.removedretweets {
		ids = append(ids, id)
	}
	return
}

// RetweetsIDs returns the "retweets" edge IDs in the mutation.
func (m *UserMutation) RetweetsIDs() (ids []int) {
	for id := range m.retweets {
		ids = append(ids, id)
	}
	return
}

// ResetRetweets resets all changes to the "retweets" edge.
func (m *UserMutation) ResetRetweets() {
	m.retweets = nil
	m.clearedretweets = false
	m.removedretweets = nil
}

// AddLikeIDs adds the "likes" edge to the Tweet entity by ids.
func (m *UserMutation) AddLikeIDs(ids ...int) {
	if m.likes == nil {
		m.likes = make(map[int]struct{})
	}
	for i := range ids {
		m.likes[ids[i]] = struct{}{}
	}
}

// ClearLikes clears the "likes" edge to the Tweet entity.
func (m *UserMutation) ClearLikes() {
	m.clearedlikes = true
}

// LikesCleared reports if the "likes" edge to the Tweet entity was cleared.
func (m *UserMutation) LikesCleared() bool {
	return m.clearedlikes
}

// RemoveLikeIDs removes the "likes" edge to the Tweet entity by IDs.
func (m *UserMutation) RemoveLikeIDs(ids ...int) {
	if m.removedlikes == nil {
		m.removedlikes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.likes, ids[i])
		m.removedlikes[ids[i]] = struct{}{}
	}
}

// RemovedLikes returns the removed IDs of the "likes" edge to the Tweet entity.
func (m *UserMutation) RemovedLikesIDs() (ids []int) {
	for id := range m.removedlikes {
		ids = append(ids, id)
	}
	return
}

// LikesIDs returns the "likes" edge IDs in the mutation.
func (m *UserMutation) LikesIDs() (ids []int) {
	for id := range m.likes {
		ids = append(ids, id)
	}
	return
}

// ResetLikes resets all changes to the "likes" edge.
func (m *UserMutation) ResetLikes() {
	m.likes = nil
	m.clearedlikes = false
	m.removedlikes = nil
}

// AddFollowerIDs adds the "followers" edge to the User entity by ids.
func (m *UserMutation) AddFollowerIDs(ids ...int) {
	if m.followers == nil {
		m.followers = make(map[int]struct{})
	}
	for i := range ids {
		m.followers[ids[i]] = struct{}{}
	}
}

// ClearFollowers clears the "followers" edge to the User entity.
func (m *UserMutation) ClearFollowers() {
	m.clearedfollowers = true
}

// FollowersCleared reports if the "followers" edge to the User entity was cleared.
func (m *UserMutation) FollowersCleared() bool {
	return m.clearedfollowers
}

// RemoveFollowerIDs removes the "followers" edge to the User entity by IDs.
func (m *UserMutation) RemoveFollowerIDs(ids ...int) {
	if m.removedfollowers == nil {
		m.removedfollowers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.followers, ids[i])
		m.removedfollowers[ids[i]] = struct{}{}
	}
}

// RemovedFollowers returns the removed IDs of the "followers" edge to the User entity.
func (m *UserMutation) RemovedFollowersIDs() (ids []int) {
	for id := range m.removedfollowers {
		ids = append(ids, id)
	}
	return
}

// FollowersIDs returns the "followers" edge IDs in the mutation.
func (m *UserMutation) FollowersIDs() (ids []int) {
	for id := range m.followers {
		ids = append(ids, id)
	}
	return
}

// ResetFollowers resets all changes to the "followers" edge.
func (m *UserMutation) ResetFollowers() {
	m.followers = nil
	m.clearedfollowers = false
	m.removedfollowers = nil
}

// AddFollowingIDs adds the "following" edge to the User entity by ids.
func (m *UserMutation) AddFollowingIDs(ids ...int) {
	if m.following == nil {
		m.following = make(map[int]struct{})
	}
	for i := range ids {
		m.following[ids[i]] = struct{}{}
	}
}

// ClearFollowing clears the "following" edge to the User entity.
func (m *UserMutation) ClearFollowing() {
	m.clearedfollowing = true
}

// FollowingCleared reports if the "following" edge to the User entity was cleared.
func (m *UserMutation) FollowingCleared() bool {
	return m.clearedfollowing
}

// RemoveFollowingIDs removes the "following" edge to the User entity by IDs.
func (m *UserMutation) RemoveFollowingIDs(ids ...int) {
	if m.removedfollowing == nil {
		m.removedfollowing = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.following, ids[i])
		m.removedfollowing[ids[i]] = struct{}{}
	}
}

// RemovedFollowing returns the removed IDs of the "following" edge to the User entity.
func (m *UserMutation) RemovedFollowingIDs() (ids []int) {
	for id := range m.removedfollowing {
		ids = append(ids, id)
	}
	return
}

// FollowingIDs returns the "following" edge IDs in the mutation.
func (m *UserMutation) FollowingIDs() (ids []int) {
	for id := range m.following {
		ids = append(ids, id)
	}
	return
}

// ResetFollowing resets all changes to the "following" edge.
func (m *UserMutation) ResetFollowing() {
	m.following = nil
	m.clearedfollowing = false
	m.removedfollowing = nil
}

// AddNotificationIDs adds the "notifications" edge to the Notification entity by ids.
func (m *UserMutation) AddNotificationIDs(ids ...int) {
	if m.notifications == nil {
		m.notifications = make(map[int]struct{})
	}
	for i := range ids {
		m.notifications[ids[i]] = struct{}{}
	}
}

// ClearNotifications clears the "notifications" edge to the Notification entity.
func (m *UserMutation) ClearNotifications() {
	m.clearednotifications = true
}

// NotificationsCleared reports if the "notifications" edge to the Notification entity was cleared.
func (m *UserMutation) NotificationsCleared() bool {
	return m.clearednotifications
}

// RemoveNotificationIDs removes the "notifications" edge to the Notification entity by IDs.
func (m *UserMutation) RemoveNotificationIDs(ids ...int) {
	if m.removednotifications == nil {
		m.removednotifications = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.notifications, ids[i])
		m.removednotifications[ids[i]] = struct{}{}
	}
}

// RemovedNotifications returns the removed IDs of the "notifications" edge to the Notification entity.
func (m *UserMutation) RemovedNotificationsIDs() (ids []int) {
	for id := range m.removednotifications {
		ids = append(ids, id)
	}
	return
}

// NotificationsIDs returns the "notifications" edge IDs in the mutation.
func (m *UserMutation) NotificationsIDs() (ids []int) {
	for id := range m.notifications {
		ids = append(ids, id)
	}
	return
}

// ResetNotifications resets all changes to the "notifications" edge.
func (m *UserMutation) ResetNotifications() {
	m.notifications = nil
	m.clearednotifications = false
	m.removednotifications = nil
}

// AddSentMessageIDs adds the "sent_messages" edge to the DirectMessage entity by ids.
func (m *UserMutation) AddSentMessageIDs(ids ...int) {
	if m.sent_messages == nil {
		m.sent_messages = make(map[int]struct{})
	}
	for i := range ids {
		m.sent_messages[ids[i]] = struct{}{}
	}
}

// ClearSentMessages clears the "sent_messages" edge to the DirectMessage entity.
func (m *UserMutation) ClearSentMessages() {
	m.clearedsent_messages = true
}

// SentMessagesCleared reports if the "sent_messages" edge to the DirectMessage entity was cleared.
func (m *UserMutation) SentMessagesCleared() bool {
	return m.clearedsent_messages
}

// RemoveSentMessageIDs removes the "sent_messages" edge to the DirectMessage entity by IDs.
func (m *UserMutation) RemoveSentMessageIDs(ids ...int) {
	if m.removedsent_messages == nil {
		m.removedsent_messages = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.sent_messages, ids[i])
		m.removedsent_messages[ids[i]] = struct{}{}
	}
}

// RemovedSentMessages returns the removed IDs of the "sent_messages" edge to the DirectMessage entity.
func (m *UserMutation) RemovedSentMessagesIDs() (ids []int) {
	for id := range m.removedsent_messages {
		ids = append(ids, id)
	}
	return
}

// SentMessagesIDs returns the "sent_messages" edge IDs in the mutation.
func (m *UserMutation) SentMessagesIDs() (ids []int) {
	for id := range m.sent_messages {
		ids = append(ids, id)
	}
	return
}

// ResetSentMessages resets all changes to the "sent_messages" edge.
func (m *UserMutation) ResetSentMessages() {
	m.sent_messages = nil
	m.clearedsent_messages = false
	m.removedsent_messages = nil
}

// AddReceivedMessageIDs adds the "received_messages" edge to the DirectMessage entity by ids.
func (m *UserMutation) AddReceivedMessageIDs(ids ...int) {
	if m.received_messages == nil {
		m.received_messages = make(map[int]struct{})
	}
	for i := range ids {
		m.received_messages[ids[i]] = struct{}{}
	}
}

// ClearReceivedMessages clears the "received_messages" edge to the DirectMessage entity.
func (m *UserMutation) ClearReceivedMessages() {
	m.clearedreceived_messages = true
}

// ReceivedMessagesCleared reports if the "received_messages" edge to the DirectMessage entity was cleared.
func (m *UserMutation) ReceivedMessagesCleared() bool {
	return m.clearedreceived_messages
}

// RemoveReceivedMessageIDs removes the "received_messages" edge to the DirectMessage entity by IDs.
func (m *UserMutation) RemoveReceivedMessageIDs(ids ...int) {
	if m.removedreceived_messages == nil {
		m.removedreceived_messages = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.received_messages, ids[i])
		m.removedreceived_messages[ids[i]] = struct{}{}
	}
}

// RemovedReceivedMessages returns the removed IDs of the "received_messages" edge to the DirectMessage entity.
func (m *UserMutation) RemovedReceivedMessagesIDs() (ids []int) {
	for id := range m.removedreceived_messages {
		ids = append(ids, id)
	}
	return
}

// ReceivedMessagesIDs returns the "received_messages" edge IDs in the mutation.
func (m *UserMutation) ReceivedMessagesIDs() (ids []int) {
	for id := range m.received_messages {
		ids = append(ids, id)
	}
	return
}

// ResetReceivedMessages resets all changes to the "received_messages" edge.
func (m *UserMutation) ResetReceivedMessages() {
	m.received_messages = nil
	m.clearedreceived_messages = false
	m.removedreceived_messages = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.avatar != nil {
		fields = append(fields, user.FieldAvatar)
	}
	if m.metadata != nil {
		fields = append(fields, user.FieldMetadata)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldAvatar:
		return m.Avatar()
	case user.FieldMetadata:
		return m.Metadata()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldAvatar:
		return m.OldAvatar(ctx)
	case user.FieldMetadata:
		return m.OldMetadata(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case user.FieldMetadata:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldName) {
		fields = append(fields, user.FieldName)
	}
	if m.FieldCleared(user.FieldEmail) {
		fields = append(fields, user.FieldEmail)
	}
	if m.FieldCleared(user.FieldPassword) {
		fields = append(fields, user.FieldPassword)
	}
	if m.FieldCleared(user.FieldAvatar) {
		fields = append(fields, user.FieldAvatar)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldName:
		m.ClearName()
		return nil
	case user.FieldEmail:
		m.ClearEmail()
		return nil
	case user.FieldPassword:
		m.ClearPassword()
		return nil
	case user.FieldAvatar:
		m.ClearAvatar()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldAvatar:
		m.ResetAvatar()
		return nil
	case user.FieldMetadata:
		m.ResetMetadata()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.tweets != nil {
		edges = append(edges, user.EdgeTweets)
	}
	if m.retweets != nil {
		edges = append(edges, user.EdgeRetweets)
	}
	if m.likes != nil {
		edges = append(edges, user.EdgeLikes)
	}
	if m.followers != nil {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.following != nil {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.notifications != nil {
		edges = append(edges, user.EdgeNotifications)
	}
	if m.sent_messages != nil {
		edges = append(edges, user.EdgeSentMessages)
	}
	if m.received_messages != nil {
		edges = append(edges, user.EdgeReceivedMessages)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTweets:
		ids := make([]ent.Value, 0, len(m.tweets))
		for id := range m.tweets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRetweets:
		ids := make([]ent.Value, 0, len(m.retweets))
		for id := range m.retweets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikes:
		ids := make([]ent.Value, 0, len(m.likes))
		for id := range m.likes {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowers:
		ids := make([]ent.Value, 0, len(m.followers))
		for id := range m.followers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowing:
		ids := make([]ent.Value, 0, len(m.following))
		for id := range m.following {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.notifications))
		for id := range m.notifications {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSentMessages:
		ids := make([]ent.Value, 0, len(m.sent_messages))
		for id := range m.sent_messages {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeReceivedMessages:
		ids := make([]ent.Value, 0, len(m.received_messages))
		for id := range m.received_messages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	if m.removedtweets != nil {
		edges = append(edges, user.EdgeTweets)
	}
	if m.removedretweets != nil {
		edges = append(edges, user.EdgeRetweets)
	}
	if m.removedlikes != nil {
		edges = append(edges, user.EdgeLikes)
	}
	if m.removedfollowers != nil {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.removedfollowing != nil {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.removednotifications != nil {
		edges = append(edges, user.EdgeNotifications)
	}
	if m.removedsent_messages != nil {
		edges = append(edges, user.EdgeSentMessages)
	}
	if m.removedreceived_messages != nil {
		edges = append(edges, user.EdgeReceivedMessages)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeTweets:
		ids := make([]ent.Value, 0, len(m.removedtweets))
		for id := range m.removedtweets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRetweets:
		ids := make([]ent.Value, 0, len(m.removedretweets))
		for id := range m.removedretweets {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeLikes:
		ids := make([]ent.Value, 0, len(m.removedlikes))
		for id := range m.removedlikes {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowers:
		ids := make([]ent.Value, 0, len(m.removedfollowers))
		for id := range m.removedfollowers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFollowing:
		ids := make([]ent.Value, 0, len(m.removedfollowing))
		for id := range m.removedfollowing {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeNotifications:
		ids := make([]ent.Value, 0, len(m.removednotifications))
		for id := range m.removednotifications {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSentMessages:
		ids := make([]ent.Value, 0, len(m.removedsent_messages))
		for id := range m.removedsent_messages {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeReceivedMessages:
		ids := make([]ent.Value, 0, len(m.removedreceived_messages))
		for id := range m.removedreceived_messages {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.clearedtweets {
		edges = append(edges, user.EdgeTweets)
	}
	if m.clearedretweets {
		edges = append(edges, user.EdgeRetweets)
	}
	if m.clearedlikes {
		edges = append(edges, user.EdgeLikes)
	}
	if m.clearedfollowers {
		edges = append(edges, user.EdgeFollowers)
	}
	if m.clearedfollowing {
		edges = append(edges, user.EdgeFollowing)
	}
	if m.clearednotifications {
		edges = append(edges, user.EdgeNotifications)
	}
	if m.clearedsent_messages {
		edges = append(edges, user.EdgeSentMessages)
	}
	if m.clearedreceived_messages {
		edges = append(edges, user.EdgeReceivedMessages)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeTweets:
		return m.clearedtweets
	case user.EdgeRetweets:
		return m.clearedretweets
	case user.EdgeLikes:
		return m.clearedlikes
	case user.EdgeFollowers:
		return m.clearedfollowers
	case user.EdgeFollowing:
		return m.clearedfollowing
	case user.EdgeNotifications:
		return m.clearednotifications
	case user.EdgeSentMessages:
		return m.clearedsent_messages
	case user.EdgeReceivedMessages:
		return m.clearedreceived_messages
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeTweets:
		m.ResetTweets()
		return nil
	case user.EdgeRetweets:
		m.ResetRetweets()
		return nil
	case user.EdgeLikes:
		m.ResetLikes()
		return nil
	case user.EdgeFollowers:
		m.ResetFollowers()
		return nil
	case user.EdgeFollowing:
		m.ResetFollowing()
		return nil
	case user.EdgeNotifications:
		m.ResetNotifications()
		return nil
	case user.EdgeSentMessages:
		m.ResetSentMessages()
		return nil
	case user.EdgeReceivedMessages:
		m.ResetReceivedMessages()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mayocream/twitter/ent/directmessage"
	"github.com/mayocream/twitter/ent/user"
)

// DirectMessage is the model entity for the DirectMessage schema.
type DirectMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// SentAt holds the value of the "sent_at" field.
	SentAt time.Time `json:"sent_at,omitempty"`
	// ReadAt holds the value of the "read_at" field.
	ReadAt time.Time `json:"read_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DirectMessageQuery when eager-loading is set.
	Edges                  DirectMessageEdges `json:"edges"`
	user_sent_messages     *int
	user_received_messages *int
	selectValues           sql.SelectValues
}

// DirectMessageEdges holds the relations/edges for other nodes in the graph.
type DirectMessageEdges struct {
	// Sender holds the value of the sender edge.
	Sender *User `json:"sender,omitempty"`
	// Receiver holds the value of the receiver edge.
	Receiver *User `json:"receiver,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DirectMessageEdges) SenderOrErr() (*User, error) {
	if e.Sender != nil {
		return e.Sender, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// ReceiverOrErr returns the Receiver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DirectMessageEdges) ReceiverOrErr() (*User, error) {
	if e.Receiver != nil {
		return e.Receiver, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "receiver"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DirectMessage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case directmessage.FieldID:
			values[i] = new(sql.NullInt64)
		case directmessage.FieldContent:
			values[i] = new(sql.NullString)
		case directmessage.FieldSentAt, directmessage.FieldReadAt:
			values[i] = new(sql.NullTime)
		case directmessage.ForeignKeys[0]: // user_sent_messages
			values[i] = new(sql.NullInt64)
		case directmessage.ForeignKeys[1]: // user_received_messages
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DirectMessage fields.
func (dm *DirectMessage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case directmessage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dm.ID = int(value.Int64)
		case directmessage.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				dm.Content = value.String
			}
		case directmessage.FieldSentAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field sent_at", values[i])
			} else if value.Valid {
				dm.SentAt = value.Time
			}
		case directmessage.FieldReadAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field read_at", values[i])
			} else if value.Valid {
				dm.ReadAt = value.Time
			}
		case directmessage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_sent_messages", value)
			} else if value.Valid {
				dm.user_sent_messages = new(int)
				*dm.user_sent_messages = int(value.Int64)
			}
		case directmessage.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_received_messages", value)
			} else if value.Valid {
				dm.user_received_messages = new(int)
				*dm.user_received_messages = int(value.Int64)
			}
		default:
			dm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DirectMessage.
// This includes values selected through modifiers, order, etc.
func (dm *DirectMessage) Value(name string) (ent.Value, error) {
	return dm.selectValues.Get(name)
}

// QuerySender queries the "sender" edge of the DirectMessage entity.
func (dm *DirectMessage) QuerySender() *UserQuery {
	return NewDirectMessageClient(dm.config).QuerySender(dm)
}

// QueryReceiver queries the "receiver" edge of the DirectMessage entity.
func (dm *DirectMessage) QueryReceiver() *UserQuery {
	return NewDirectMessageClient(dm.config).QueryReceiver(dm)
}

// Update returns a builder for updating this DirectMessage.
// Note that you need to call DirectMessage.Unwrap() before calling this method if this DirectMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (dm *DirectMessage) Update() *DirectMessageUpdateOne {
	return NewDirectMessageClient(dm.config).UpdateOne(dm)
}

// Unwrap unwraps the DirectMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dm *DirectMessage) Unwrap() *DirectMessage {
	_tx, ok := dm.config.driver.(*txDriver)
	if !ok {
		panic("ent: DirectMessage is not a transactional entity")
	}
	dm.config.driver = _tx.drv
	return dm
}

// String implements the fmt.Stringer.
func (dm *DirectMessage) String() string {
	var builder strings.Builder
	builder.WriteString("DirectMessage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dm.ID))
	builder.WriteString("content=")
	builder.WriteString(dm.Content)
	builder.WriteString(", ")
	builder.WriteString("sent_at=")
	builder.WriteString(dm.SentAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("read_at=")
	builder.WriteString(dm.ReadAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DirectMessages is a parsable slice of DirectMessage.
type DirectMessages []*DirectMessage

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mayocream/twitter/ent/hashtag"
	"github.com/mayocream/twitter/ent/predicate"
	"github.com/mayocream/twitter/ent/tweet"
	"github.com/mayocream/twitter/ent/user"
)

// TweetUpdate is the builder for updating Tweet entities.
type TweetUpdate struct {
	config
	hooks    []Hook
	mutation *TweetMutation
}

// Where appends a list predicates to the TweetUpdate builder.
func (tu *TweetUpdate) Where(ps ...predicate.Tweet) *TweetUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetContent sets the "content" field.
func (tu *TweetUpdate) SetContent(s string) *TweetUpdate {
	tu.mutation.SetContent(s)
	return tu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tu *TweetUpdate) SetNillableContent(s *string) *TweetUpdate {
	if s != nil {
		tu.SetContent(*s)
	}
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TweetUpdate) SetCreatedAt(t time.Time) *TweetUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TweetUpdate) SetNillableCreatedAt(t *time.Time) *TweetUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TweetUpdate) SetUpdatedAt(t time.Time) *TweetUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (tu *TweetUpdate) SetAuthorID(id int) *TweetUpdate {
	tu.mutation.SetAuthorID(id)
	return tu
}

// SetAuthor sets the "author" edge to the User entity.
func (tu *TweetUpdate) SetAuthor(u *User) *TweetUpdate {
	return tu.SetAuthorID(u.ID)
}

// AddLikedByIDs adds the "liked_by" edge to the User entity by IDs.
func (tu *TweetUpdate) AddLikedByIDs(ids ...int) *TweetUpdate {
	tu.mutation.AddLikedByIDs(ids...)
	return tu
}

// AddLikedBy adds the "liked_by" edges to the User entity.
func (tu *TweetUpdate) AddLikedBy(u ...*User) *TweetUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddLikedByIDs(ids...)
}

// AddRetweetedByIDs adds the "retweeted_by" edge to the User entity by IDs.
func (tu *TweetUpdate) AddRetweetedByIDs(ids ...int) *TweetUpdate {
	tu.mutation.AddRetweetedByIDs(ids...)
	return tu
}

// AddRetweetedBy adds the "retweeted_by" edges to the User entity.
func (tu *TweetUpdate) AddRetweetedBy(u ...*User) *TweetUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddRetweetedByIDs(ids...)
}

// SetParentTweetID sets the "parent_tweet" edge to the Tweet entity by ID.
func (tu *TweetUpdate) SetParentTweetID(id int) *TweetUpdate {
	tu.mutation.SetParentTweetID(id)
	return tu
}

// SetNillableParentTweetID sets the "parent_tweet" edge to the Tweet entity by ID if the given value is not nil.
func (tu *TweetUpdate) SetNillableParentTweetID(id *int) *TweetUpdate {
	if id != nil {
		tu = tu.SetParentTweetID(*id)
	}
	return tu
}

// SetParentTweet sets the "parent_tweet" edge to the Tweet entity.
func (tu *TweetUpdate) SetParentTweet(t *Tweet) *TweetUpdate {
	return tu.SetParentTweetID(t.ID)
}

// AddReplyIDs adds the "replies" edge to the Tweet entity by IDs.
func (tu *TweetUpdate) AddReplyIDs(ids ...int) *TweetUpdate {
	tu.mutation.AddReplyIDs(ids...)
	return tu
}

// AddReplies adds the "replies" edges to the Tweet entity.
func (tu *TweetUpdate) AddReplies(t ...*Tweet) *TweetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddReplyIDs(ids...)
}

// AddMentionIDs adds the "mentions" edge to the User entity by IDs.
func (tu *TweetUpdate) AddMentionIDs(ids ...int) *TweetUpdate {
	tu.mutation.AddMentionIDs(ids...)
	return tu
}

// AddMentions adds the "mentions" edges to the User entity.
func (tu *TweetUpdate) AddMentions(u ...*User) *TweetUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddMentionIDs(ids...)
}

// AddHashtagIDs adds the "hashtags" edge to the Hashtag entity by IDs.
func (tu *TweetUpdate) AddHashtagIDs(ids ...int) *TweetUpdate {
	tu.mutation.AddHashtagIDs(ids...)
	return tu
}

// AddHashtags adds the "hashtags" edges to the Hashtag entity.
func (tu *TweetUpdate) AddHashtags(h ...*Hashtag) *TweetUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tu.AddHashtagIDs(ids...)
}

// Mutation returns the TweetMutation object of the builder.
func (tu *TweetUpdate) Mutation() *TweetMutation {
	return tu.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (tu *TweetUpdate) ClearAuthor() *TweetUpdate {
	tu.mutation.ClearAuthor()
	return tu
}

// ClearLikedBy clears all "liked_by" edges to the User entity.
func (tu *TweetUpdate) ClearLikedBy() *TweetUpdate {
	tu.mutation.ClearLikedBy()
	return tu
}

// RemoveLikedByIDs removes the "liked_by" edge to User entities by IDs.
func (tu *TweetUpdate) RemoveLikedByIDs(ids ...int) *TweetUpdate {
	tu.mutation.RemoveLikedByIDs(ids...)
	return tu
}

// RemoveLikedBy removes "liked_by" edges to User entities.
func (tu *TweetUpdate) RemoveLikedBy(u ...*User) *TweetUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveLikedByIDs(ids...)
}

// ClearRetweetedBy clears all "retweeted_by" edges to the User entity.
func (tu *TweetUpdate) ClearRetweetedBy() *TweetUpdate {
	tu.mutation.ClearRetweetedBy()
	return tu
}

// RemoveRetweetedByIDs removes the "retweeted_by" edge to User entities by IDs.
func (tu *TweetUpdate) RemoveRetweetedByIDs(ids ...int) *TweetUpdate {
	tu.mutation.RemoveRetweetedByIDs(ids...)
	return tu
}

// RemoveRetweetedBy removes "retweeted_by" edges to User entities.
func (tu *TweetUpdate) RemoveRetweetedBy(u ...*User) *TweetUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveRetweetedByIDs(ids...)
}

// ClearParentTweet clears the "parent_tweet" edge to the Tweet entity.
func (tu *TweetUpdate) ClearParentTweet() *TweetUpdate {
	tu.mutation.ClearParentTweet()
	return tu
}

// ClearReplies clears all "replies" edges to the Tweet entity.
func (tu *TweetUpdate) ClearReplies() *TweetUpdate {
	tu.mutation.ClearReplies()
	return tu
}

// RemoveReplyIDs removes the "replies" edge to Tweet entities by IDs.
func (tu *TweetUpdate) RemoveReplyIDs(ids ...int) *TweetUpdate {
	tu.mutation.RemoveReplyIDs(ids...)
	return tu
}

// RemoveReplies removes "replies" edges to Tweet entities.
func (tu *TweetUpdate) RemoveReplies(t ...*Tweet) *TweetUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveReplyIDs(ids...)
}

// ClearMentions clears all "mentions" edges to the User entity.
func (tu *TweetUpdate) ClearMentions() *TweetUpdate {
	tu.mutation.ClearMentions()
	return tu
}

// RemoveMentionIDs removes the "mentions" edge to User entities by IDs.
func (tu *TweetUpdate) RemoveMentionIDs(ids ...int) *TweetUpdate {
	tu.mutation.RemoveMentionIDs(ids...)
	return tu
}

// RemoveMentions removes "mentions" edges to User entities.
func (tu *TweetUpdate) RemoveMentions(u ...*User) *TweetUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveMentionIDs(ids...)
}

// ClearHashtags clears all "hashtags" edges to the Hashtag entity.
func (tu *TweetUpdate) ClearHashtags() *TweetUpdate {
	tu.mutation.ClearHashtags()
	return tu
}

// RemoveHashtagIDs removes the "hashtags" edge to Hashtag entities by IDs.
func (tu *TweetUpdate) RemoveHashtagIDs(ids ...int) *TweetUpdate {
	tu.mutation.RemoveHashtagIDs(ids...)
	return tu
}

// RemoveHashtags removes "hashtags" edges to Hashtag entities.
func (tu *TweetUpdate) RemoveHashtags(h ...*Hashtag) *TweetUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tu.RemoveHashtagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TweetUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TweetUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TweetUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TweetUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TweetUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := tweet.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TweetUpdate) check() error {
	if tu.mutation.AuthorCleared() && len(tu.mutation.AuthorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tweet.author"`)
	}
	return nil
}

func (tu *TweetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tweet.Table, tweet.Columns, sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Content(); ok {
		_spec.SetField(tweet.FieldContent, field.TypeString, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(tweet.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tweet.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.AuthorTable,
			Columns: []string{tweet.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.AuthorTable,
			Columns: []string{tweet.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.LikedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.LikedByTable,
			Columns: tweet.LikedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedLikedByIDs(); len(nodes) > 0 && !tu.mutation.LikedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.LikedByTable,
			Columns: tweet.LikedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.LikedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.LikedByTable,
			Columns: tweet.LikedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.RetweetedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.RetweetedByTable,
			Columns: tweet.RetweetedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedRetweetedByIDs(); len(nodes) > 0 && !tu.mutation.RetweetedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.RetweetedByTable,
			Columns: tweet.RetweetedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RetweetedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.RetweetedByTable,
			Columns: tweet.RetweetedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ParentTweetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.ParentTweetTable,
			Columns: []string{tweet.ParentTweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ParentTweetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.ParentTweetTable,
			Columns: []string{tweet.ParentTweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RepliesTable,
			Columns: []string{tweet.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !tu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RepliesTable,
			Columns: []string{tweet.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RepliesTable,
			Columns: []string{tweet.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.MentionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.MentionsTable,
			Columns: []string{tweet.MentionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedMentionsIDs(); len(nodes) > 0 && !tu.mutation.MentionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.MentionsTable,
			Columns: []string{tweet.MentionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.MentionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.MentionsTable,
			Columns: []string{tweet.MentionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.HashtagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tweet.HashtagsTable,
			Columns: tweet.HashtagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashtag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedHashtagsIDs(); len(nodes) > 0 && !tu.mutation.HashtagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tweet.HashtagsTable,
			Columns: tweet.HashtagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.HashtagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tweet.HashtagsTable,
			Columns: tweet.HashtagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tweet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TweetUpdateOne is the builder for updating a single Tweet entity.
type TweetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TweetMutation
}

// SetContent sets the "content" field.
func (tuo *TweetUpdateOne) SetContent(s string) *TweetUpdateOne {
	tuo.mutation.SetContent(s)
	return tuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableContent(s *string) *TweetUpdateOne {
	if s != nil {
		tuo.SetContent(*s)
	}
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TweetUpdateOne) SetCreatedAt(t time.Time) *TweetUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableCreatedAt(t *time.Time) *TweetUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TweetUpdateOne) SetUpdatedAt(t time.Time) *TweetUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (tuo *TweetUpdateOne) SetAuthorID(id int) *TweetUpdateOne {
	tuo.mutation.SetAuthorID(id)
	return tuo
}

// SetAuthor sets the "author" edge to the User entity.
func (tuo *TweetUpdateOne) SetAuthor(u *User) *TweetUpdateOne {
	return tuo.SetAuthorID(u.ID)
}

// AddLikedByIDs adds the "liked_by" edge to the User entity by IDs.
func (tuo *TweetUpdateOne) AddLikedByIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.AddLikedByIDs(ids...)
	return tuo
}

// AddLikedBy adds the "liked_by" edges to the User entity.
func (tuo *TweetUpdateOne) AddLikedBy(u ...*User) *TweetUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddLikedByIDs(ids...)
}

// AddRetweetedByIDs adds the "retweeted_by" edge to the User entity by IDs.
func (tuo *TweetUpdateOne) AddRetweetedByIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.AddRetweetedByIDs(ids...)
	return tuo
}

// AddRetweetedBy adds the "retweeted_by" edges to the User entity.
func (tuo *TweetUpdateOne) AddRetweetedBy(u ...*User) *TweetUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddRetweetedByIDs(ids...)
}

// SetParentTweetID sets the "parent_tweet" edge to the Tweet entity by ID.
func (tuo *TweetUpdateOne) SetParentTweetID(id int) *TweetUpdateOne {
	tuo.mutation.SetParentTweetID(id)
	return tuo
}

// SetNillableParentTweetID sets the "parent_tweet" edge to the Tweet entity by ID if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableParentTweetID(id *int) *TweetUpdateOne {
	if id != nil {
		tuo = tuo.SetParentTweetID(*id)
	}
	return tuo
}

// SetParentTweet sets the "parent_tweet" edge to the Tweet entity.
func (tuo *TweetUpdateOne) SetParentTweet(t *Tweet) *TweetUpdateOne {
	return tuo.SetParentTweetID(t.ID)
}

// AddReplyIDs adds the "replies" edge to the Tweet entity by IDs.
func (tuo *TweetUpdateOne) AddReplyIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.AddReplyIDs(ids...)
	return tuo
}

// AddReplies adds the "replies" edges to the Tweet entity.
func (tuo *TweetUpdateOne) AddReplies(t ...*Tweet) *TweetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddReplyIDs(ids...)
}

// AddMentionIDs adds the "mentions" edge to the User entity by IDs.
func (tuo *TweetUpdateOne) AddMentionIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.AddMentionIDs(ids...)
	return tuo
}

// AddMentions adds the "mentions" edges to the User entity.
func (tuo *TweetUpdateOne) AddMentions(u ...*User) *TweetUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddMentionIDs(ids...)
}

// AddHashtagIDs adds the "hashtags" edge to the Hashtag entity by IDs.
func (tuo *TweetUpdateOne) AddHashtagIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.AddHashtagIDs(ids...)
	return tuo
}

// AddHashtags adds the "hashtags" edges to the Hashtag entity.
func (tuo *TweetUpdateOne) AddHashtags(h ...*Hashtag) *TweetUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tuo.AddHashtagIDs(ids...)
}

// Mutation returns the TweetMutation object of the builder.
func (tuo *TweetUpdateOne) Mutation() *TweetMutation {
	return tuo.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (tuo *TweetUpdateOne) ClearAuthor() *TweetUpdateOne {
	tuo.mutation.ClearAuthor()
	return tuo
}

// ClearLikedBy clears all "liked_by" edges to the User entity.
func (tuo *TweetUpdateOne) ClearLikedBy() *TweetUpdateOne {
	tuo.mutation.ClearLikedBy()
	return tuo
}

// RemoveLikedByIDs removes the "liked_by" edge to User entities by IDs.
func (tuo *TweetUpdateOne) RemoveLikedByIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.RemoveLikedByIDs(ids...)
	return tuo
}

// RemoveLikedBy removes "liked_by" edges to User entities.
func (tuo *TweetUpdateOne) RemoveLikedBy(u ...*User) *TweetUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveLikedByIDs(ids...)
}

// ClearRetweetedBy clears all "retweeted_by" edges to the User entity.
func (tuo *TweetUpdateOne) ClearRetweetedBy() *TweetUpdateOne {
	tuo.mutation.ClearRetweetedBy()
	return tuo
}

// RemoveRetweetedByIDs removes the "retweeted_by" edge to User entities by IDs.
func (tuo *TweetUpdateOne) RemoveRetweetedByIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.RemoveRetweetedByIDs(ids...)
	return tuo
}

// RemoveRetweetedBy removes "retweeted_by" edges to User entities.
func (tuo *TweetUpdateOne) RemoveRetweetedBy(u ...*User) *TweetUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveRetweetedByIDs(ids...)
}

// ClearParentTweet clears the "parent_tweet" edge to the Tweet entity.
func (tuo *TweetUpdateOne) ClearParentTweet() *TweetUpdateOne {
	tuo.mutation.ClearParentTweet()
	return tuo
}

// ClearReplies clears all "replies" edges to the Tweet entity.
func (tuo *TweetUpdateOne) ClearReplies() *TweetUpdateOne {
	tuo.mutation.ClearReplies()
	return tuo
}

// RemoveReplyIDs removes the "replies" edge to Tweet entities by IDs.
func (tuo *TweetUpdateOne) RemoveReplyIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.RemoveReplyIDs(ids...)
	return tuo
}

// RemoveReplies removes "replies" edges to Tweet entities.
func (tuo *TweetUpdateOne) RemoveReplies(t ...*Tweet) *TweetUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveReplyIDs(ids...)
}

// ClearMentions clears all "mentions" edges to the User entity.
func (tuo *TweetUpdateOne) ClearMentions() *TweetUpdateOne {
	tuo.mutation.ClearMentions()
	return tuo
}

// RemoveMentionIDs removes the "mentions" edge to User entities by IDs.
func (tuo *TweetUpdateOne) RemoveMentionIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.RemoveMentionIDs(ids...)
	return tuo
}

// RemoveMentions removes "mentions" edges to User entities.
func (tuo *TweetUpdateOne) RemoveMentions(u ...*User) *TweetUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveMentionIDs(ids...)
}

// ClearHashtags clears all "hashtags" edges to the Hashtag entity.
func (tuo *TweetUpdateOne) ClearHashtags() *TweetUpdateOne {
	tuo.mutation.ClearHashtags()
	return tuo
}

// RemoveHashtagIDs removes the "hashtags" edge to Hashtag entities by IDs.
func (tuo *TweetUpdateOne) RemoveHashtagIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.RemoveHashtagIDs(ids...)
	return tuo
}

// RemoveHashtags removes "hashtags" edges to Hashtag entities.
func (tuo *TweetUpdateOne) RemoveHashtags(h ...*Hashtag) *TweetUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return tuo.RemoveHashtagIDs(ids...)
}

// Where appends a list predicates to the TweetUpdate builder.
func (tuo *TweetUpdateOne) Where(ps ...predicate.Tweet) *TweetUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TweetUpdateOne) Select(field string, fields ...string) *TweetUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tweet entity.
func (tuo *TweetUpdateOne) Save(ctx context.Context) (*Tweet, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TweetUpdateOne) SaveX(ctx context.Context) *Tweet {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TweetUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TweetUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TweetUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := tweet.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TweetUpdateOne) check() error {
	if tuo.mutation.AuthorCleared() && len(tuo.mutation.AuthorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tweet.author"`)
	}
	return nil
}

func (tuo *TweetUpdateOne) sqlSave(ctx context.Context) (_node *Tweet, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tweet.Table, tweet.Columns, sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tweet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tweet.FieldID)
		for _, f := range fields {
			if !tweet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tweet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Content(); ok {
		_spec.SetField(tweet.FieldContent, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(tweet.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tweet.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.AuthorTable,
			Columns: []string{tweet.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.AuthorTable,
			Columns: []string{tweet.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.LikedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.LikedByTable,
			Columns: tweet.LikedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedLikedByIDs(); len(nodes) > 0 && !tuo.mutation.LikedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.LikedByTable,
			Columns: tweet.LikedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.LikedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.LikedByTable,
			Columns: tweet.LikedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.RetweetedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.RetweetedByTable,
			Columns: tweet.RetweetedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedRetweetedByIDs(); len(nodes) > 0 && !tuo.mutation.RetweetedByCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.RetweetedByTable,
			Columns: tweet.RetweetedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RetweetedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tweet.RetweetedByTable,
			Columns: tweet.RetweetedByPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ParentTweetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.ParentTweetTable,
			Columns: []string{tweet.ParentTweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ParentTweetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.ParentTweetTable,
			Columns: []string{tweet.ParentTweetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RepliesTable,
			Columns: []string{tweet.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !tuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RepliesTable,
			Columns: []string{tweet.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RepliesTable,
			Columns: []string{tweet.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.MentionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.MentionsTable,
			Columns: []string{tweet.MentionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedMentionsIDs(); len(nodes) > 0 && !tuo.mutation.MentionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.MentionsTable,
			Columns: []string{tweet.MentionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.MentionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.MentionsTable,
			Columns: []string{tweet.MentionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.HashtagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tweet.HashtagsTable,
			Columns: tweet.HashtagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashtag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedHashtagsIDs(); len(nodes) > 0 && !tuo.mutation.HashtagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tweet.HashtagsTable,
			Columns: tweet.HashtagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.HashtagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   tweet.HashtagsTable,
			Columns: tweet.HashtagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashtag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tweet{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tweet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}

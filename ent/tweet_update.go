// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mayocream/twitter2/ent/like"
	"github.com/mayocream/twitter2/ent/predicate"
	"github.com/mayocream/twitter2/ent/retweet"
	"github.com/mayocream/twitter2/ent/tweet"
	"github.com/mayocream/twitter2/ent/user"
)

// TweetUpdate is the builder for updating Tweet entities.
type TweetUpdate struct {
	config
	hooks    []Hook
	mutation *TweetMutation
}

// Where appends a list predicates to the TweetUpdate builder.
func (tu *TweetUpdate) Where(ps ...predicate.Tweet) *TweetUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetContent sets the "content" field.
func (tu *TweetUpdate) SetContent(s string) *TweetUpdate {
	tu.mutation.SetContent(s)
	return tu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tu *TweetUpdate) SetNillableContent(s *string) *TweetUpdate {
	if s != nil {
		tu.SetContent(*s)
	}
	return tu
}

// SetAuthorID sets the "author_id" field.
func (tu *TweetUpdate) SetAuthorID(i int) *TweetUpdate {
	tu.mutation.SetAuthorID(i)
	return tu
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (tu *TweetUpdate) SetNillableAuthorID(i *int) *TweetUpdate {
	if i != nil {
		tu.SetAuthorID(*i)
	}
	return tu
}

// SetParentID sets the "parent_id" field.
func (tu *TweetUpdate) SetParentID(i int) *TweetUpdate {
	tu.mutation.SetParentID(i)
	return tu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tu *TweetUpdate) SetNillableParentID(i *int) *TweetUpdate {
	if i != nil {
		tu.SetParentID(*i)
	}
	return tu
}

// ClearParentID clears the value of the "parent_id" field.
func (tu *TweetUpdate) ClearParentID() *TweetUpdate {
	tu.mutation.ClearParentID()
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TweetUpdate) SetCreatedAt(t time.Time) *TweetUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TweetUpdate) SetNillableCreatedAt(t *time.Time) *TweetUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TweetUpdate) SetUpdatedAt(t time.Time) *TweetUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetParent sets the "parent" edge to the Tweet entity.
func (tu *TweetUpdate) SetParent(t *Tweet) *TweetUpdate {
	return tu.SetParentID(t.ID)
}

// SetAuthor sets the "author" edge to the User entity.
func (tu *TweetUpdate) SetAuthor(u *User) *TweetUpdate {
	return tu.SetAuthorID(u.ID)
}

// AddLikeIDs adds the "likes" edge to the Like entity by IDs.
func (tu *TweetUpdate) AddLikeIDs(ids ...int) *TweetUpdate {
	tu.mutation.AddLikeIDs(ids...)
	return tu
}

// AddLikes adds the "likes" edges to the Like entity.
func (tu *TweetUpdate) AddLikes(l ...*Like) *TweetUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.AddLikeIDs(ids...)
}

// AddRetweetIDs adds the "retweets" edge to the Retweet entity by IDs.
func (tu *TweetUpdate) AddRetweetIDs(ids ...int) *TweetUpdate {
	tu.mutation.AddRetweetIDs(ids...)
	return tu
}

// AddRetweets adds the "retweets" edges to the Retweet entity.
func (tu *TweetUpdate) AddRetweets(r ...*Retweet) *TweetUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.AddRetweetIDs(ids...)
}

// Mutation returns the TweetMutation object of the builder.
func (tu *TweetUpdate) Mutation() *TweetMutation {
	return tu.mutation
}

// ClearParent clears the "parent" edge to the Tweet entity.
func (tu *TweetUpdate) ClearParent() *TweetUpdate {
	tu.mutation.ClearParent()
	return tu
}

// ClearAuthor clears the "author" edge to the User entity.
func (tu *TweetUpdate) ClearAuthor() *TweetUpdate {
	tu.mutation.ClearAuthor()
	return tu
}

// ClearLikes clears all "likes" edges to the Like entity.
func (tu *TweetUpdate) ClearLikes() *TweetUpdate {
	tu.mutation.ClearLikes()
	return tu
}

// RemoveLikeIDs removes the "likes" edge to Like entities by IDs.
func (tu *TweetUpdate) RemoveLikeIDs(ids ...int) *TweetUpdate {
	tu.mutation.RemoveLikeIDs(ids...)
	return tu
}

// RemoveLikes removes "likes" edges to Like entities.
func (tu *TweetUpdate) RemoveLikes(l ...*Like) *TweetUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tu.RemoveLikeIDs(ids...)
}

// ClearRetweets clears all "retweets" edges to the Retweet entity.
func (tu *TweetUpdate) ClearRetweets() *TweetUpdate {
	tu.mutation.ClearRetweets()
	return tu
}

// RemoveRetweetIDs removes the "retweets" edge to Retweet entities by IDs.
func (tu *TweetUpdate) RemoveRetweetIDs(ids ...int) *TweetUpdate {
	tu.mutation.RemoveRetweetIDs(ids...)
	return tu
}

// RemoveRetweets removes "retweets" edges to Retweet entities.
func (tu *TweetUpdate) RemoveRetweets(r ...*Retweet) *TweetUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.RemoveRetweetIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TweetUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TweetUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TweetUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TweetUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TweetUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := tweet.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TweetUpdate) check() error {
	if tu.mutation.AuthorCleared() && len(tu.mutation.AuthorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tweet.author"`)
	}
	return nil
}

func (tu *TweetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(tweet.Table, tweet.Columns, sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Content(); ok {
		_spec.SetField(tweet.FieldContent, field.TypeString, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(tweet.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(tweet.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tweet.ParentTable,
			Columns: []string{tweet.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tweet.ParentTable,
			Columns: []string{tweet.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.AuthorTable,
			Columns: []string{tweet.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.AuthorTable,
			Columns: []string{tweet.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.LikesTable,
			Columns: []string{tweet.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedLikesIDs(); len(nodes) > 0 && !tu.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.LikesTable,
			Columns: []string{tweet.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.LikesTable,
			Columns: []string{tweet.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.RetweetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RetweetsTable,
			Columns: []string{tweet.RetweetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedRetweetsIDs(); len(nodes) > 0 && !tu.mutation.RetweetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RetweetsTable,
			Columns: []string{tweet.RetweetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RetweetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RetweetsTable,
			Columns: []string{tweet.RetweetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tweet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TweetUpdateOne is the builder for updating a single Tweet entity.
type TweetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TweetMutation
}

// SetContent sets the "content" field.
func (tuo *TweetUpdateOne) SetContent(s string) *TweetUpdateOne {
	tuo.mutation.SetContent(s)
	return tuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableContent(s *string) *TweetUpdateOne {
	if s != nil {
		tuo.SetContent(*s)
	}
	return tuo
}

// SetAuthorID sets the "author_id" field.
func (tuo *TweetUpdateOne) SetAuthorID(i int) *TweetUpdateOne {
	tuo.mutation.SetAuthorID(i)
	return tuo
}

// SetNillableAuthorID sets the "author_id" field if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableAuthorID(i *int) *TweetUpdateOne {
	if i != nil {
		tuo.SetAuthorID(*i)
	}
	return tuo
}

// SetParentID sets the "parent_id" field.
func (tuo *TweetUpdateOne) SetParentID(i int) *TweetUpdateOne {
	tuo.mutation.SetParentID(i)
	return tuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableParentID(i *int) *TweetUpdateOne {
	if i != nil {
		tuo.SetParentID(*i)
	}
	return tuo
}

// ClearParentID clears the value of the "parent_id" field.
func (tuo *TweetUpdateOne) ClearParentID() *TweetUpdateOne {
	tuo.mutation.ClearParentID()
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TweetUpdateOne) SetCreatedAt(t time.Time) *TweetUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TweetUpdateOne) SetNillableCreatedAt(t *time.Time) *TweetUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TweetUpdateOne) SetUpdatedAt(t time.Time) *TweetUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetParent sets the "parent" edge to the Tweet entity.
func (tuo *TweetUpdateOne) SetParent(t *Tweet) *TweetUpdateOne {
	return tuo.SetParentID(t.ID)
}

// SetAuthor sets the "author" edge to the User entity.
func (tuo *TweetUpdateOne) SetAuthor(u *User) *TweetUpdateOne {
	return tuo.SetAuthorID(u.ID)
}

// AddLikeIDs adds the "likes" edge to the Like entity by IDs.
func (tuo *TweetUpdateOne) AddLikeIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.AddLikeIDs(ids...)
	return tuo
}

// AddLikes adds the "likes" edges to the Like entity.
func (tuo *TweetUpdateOne) AddLikes(l ...*Like) *TweetUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.AddLikeIDs(ids...)
}

// AddRetweetIDs adds the "retweets" edge to the Retweet entity by IDs.
func (tuo *TweetUpdateOne) AddRetweetIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.AddRetweetIDs(ids...)
	return tuo
}

// AddRetweets adds the "retweets" edges to the Retweet entity.
func (tuo *TweetUpdateOne) AddRetweets(r ...*Retweet) *TweetUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.AddRetweetIDs(ids...)
}

// Mutation returns the TweetMutation object of the builder.
func (tuo *TweetUpdateOne) Mutation() *TweetMutation {
	return tuo.mutation
}

// ClearParent clears the "parent" edge to the Tweet entity.
func (tuo *TweetUpdateOne) ClearParent() *TweetUpdateOne {
	tuo.mutation.ClearParent()
	return tuo
}

// ClearAuthor clears the "author" edge to the User entity.
func (tuo *TweetUpdateOne) ClearAuthor() *TweetUpdateOne {
	tuo.mutation.ClearAuthor()
	return tuo
}

// ClearLikes clears all "likes" edges to the Like entity.
func (tuo *TweetUpdateOne) ClearLikes() *TweetUpdateOne {
	tuo.mutation.ClearLikes()
	return tuo
}

// RemoveLikeIDs removes the "likes" edge to Like entities by IDs.
func (tuo *TweetUpdateOne) RemoveLikeIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.RemoveLikeIDs(ids...)
	return tuo
}

// RemoveLikes removes "likes" edges to Like entities.
func (tuo *TweetUpdateOne) RemoveLikes(l ...*Like) *TweetUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return tuo.RemoveLikeIDs(ids...)
}

// ClearRetweets clears all "retweets" edges to the Retweet entity.
func (tuo *TweetUpdateOne) ClearRetweets() *TweetUpdateOne {
	tuo.mutation.ClearRetweets()
	return tuo
}

// RemoveRetweetIDs removes the "retweets" edge to Retweet entities by IDs.
func (tuo *TweetUpdateOne) RemoveRetweetIDs(ids ...int) *TweetUpdateOne {
	tuo.mutation.RemoveRetweetIDs(ids...)
	return tuo
}

// RemoveRetweets removes "retweets" edges to Retweet entities.
func (tuo *TweetUpdateOne) RemoveRetweets(r ...*Retweet) *TweetUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.RemoveRetweetIDs(ids...)
}

// Where appends a list predicates to the TweetUpdate builder.
func (tuo *TweetUpdateOne) Where(ps ...predicate.Tweet) *TweetUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TweetUpdateOne) Select(field string, fields ...string) *TweetUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tweet entity.
func (tuo *TweetUpdateOne) Save(ctx context.Context) (*Tweet, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TweetUpdateOne) SaveX(ctx context.Context) *Tweet {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TweetUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TweetUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TweetUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := tweet.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TweetUpdateOne) check() error {
	if tuo.mutation.AuthorCleared() && len(tuo.mutation.AuthorIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Tweet.author"`)
	}
	return nil
}

func (tuo *TweetUpdateOne) sqlSave(ctx context.Context) (_node *Tweet, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(tweet.Table, tweet.Columns, sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tweet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tweet.FieldID)
		for _, f := range fields {
			if !tweet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tweet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Content(); ok {
		_spec.SetField(tweet.FieldContent, field.TypeString, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(tweet.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tweet.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tweet.ParentTable,
			Columns: []string{tweet.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   tweet.ParentTable,
			Columns: []string{tweet.ParentColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.AuthorTable,
			Columns: []string{tweet.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tweet.AuthorTable,
			Columns: []string{tweet.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.LikesTable,
			Columns: []string{tweet.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedLikesIDs(); len(nodes) > 0 && !tuo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.LikesTable,
			Columns: []string{tweet.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.LikesTable,
			Columns: []string{tweet.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.RetweetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RetweetsTable,
			Columns: []string{tweet.RetweetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retweet.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedRetweetsIDs(); len(nodes) > 0 && !tuo.mutation.RetweetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RetweetsTable,
			Columns: []string{tweet.RetweetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RetweetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tweet.RetweetsTable,
			Columns: []string{tweet.RetweetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(retweet.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tweet{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tweet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mayocream/twitter/ent/directmessage"
	"github.com/mayocream/twitter/ent/user"
)

// DirectMessageCreate is the builder for creating a DirectMessage entity.
type DirectMessageCreate struct {
	config
	mutation *DirectMessageMutation
	hooks    []Hook
}

// SetContent sets the "content" field.
func (dmc *DirectMessageCreate) SetContent(s string) *DirectMessageCreate {
	dmc.mutation.SetContent(s)
	return dmc
}

// SetSentAt sets the "sent_at" field.
func (dmc *DirectMessageCreate) SetSentAt(t time.Time) *DirectMessageCreate {
	dmc.mutation.SetSentAt(t)
	return dmc
}

// SetNillableSentAt sets the "sent_at" field if the given value is not nil.
func (dmc *DirectMessageCreate) SetNillableSentAt(t *time.Time) *DirectMessageCreate {
	if t != nil {
		dmc.SetSentAt(*t)
	}
	return dmc
}

// SetReadAt sets the "read_at" field.
func (dmc *DirectMessageCreate) SetReadAt(t time.Time) *DirectMessageCreate {
	dmc.mutation.SetReadAt(t)
	return dmc
}

// SetNillableReadAt sets the "read_at" field if the given value is not nil.
func (dmc *DirectMessageCreate) SetNillableReadAt(t *time.Time) *DirectMessageCreate {
	if t != nil {
		dmc.SetReadAt(*t)
	}
	return dmc
}

// SetSenderID sets the "sender" edge to the User entity by ID.
func (dmc *DirectMessageCreate) SetSenderID(id int) *DirectMessageCreate {
	dmc.mutation.SetSenderID(id)
	return dmc
}

// SetSender sets the "sender" edge to the User entity.
func (dmc *DirectMessageCreate) SetSender(u *User) *DirectMessageCreate {
	return dmc.SetSenderID(u.ID)
}

// SetReceiverID sets the "receiver" edge to the User entity by ID.
func (dmc *DirectMessageCreate) SetReceiverID(id int) *DirectMessageCreate {
	dmc.mutation.SetReceiverID(id)
	return dmc
}

// SetReceiver sets the "receiver" edge to the User entity.
func (dmc *DirectMessageCreate) SetReceiver(u *User) *DirectMessageCreate {
	return dmc.SetReceiverID(u.ID)
}

// Mutation returns the DirectMessageMutation object of the builder.
func (dmc *DirectMessageCreate) Mutation() *DirectMessageMutation {
	return dmc.mutation
}

// Save creates the DirectMessage in the database.
func (dmc *DirectMessageCreate) Save(ctx context.Context) (*DirectMessage, error) {
	dmc.defaults()
	return withHooks(ctx, dmc.sqlSave, dmc.mutation, dmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dmc *DirectMessageCreate) SaveX(ctx context.Context) *DirectMessage {
	v, err := dmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dmc *DirectMessageCreate) Exec(ctx context.Context) error {
	_, err := dmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmc *DirectMessageCreate) ExecX(ctx context.Context) {
	if err := dmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dmc *DirectMessageCreate) defaults() {
	if _, ok := dmc.mutation.SentAt(); !ok {
		v := directmessage.DefaultSentAt()
		dmc.mutation.SetSentAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dmc *DirectMessageCreate) check() error {
	if _, ok := dmc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "DirectMessage.content"`)}
	}
	if _, ok := dmc.mutation.SentAt(); !ok {
		return &ValidationError{Name: "sent_at", err: errors.New(`ent: missing required field "DirectMessage.sent_at"`)}
	}
	if len(dmc.mutation.SenderIDs()) == 0 {
		return &ValidationError{Name: "sender", err: errors.New(`ent: missing required edge "DirectMessage.sender"`)}
	}
	if len(dmc.mutation.ReceiverIDs()) == 0 {
		return &ValidationError{Name: "receiver", err: errors.New(`ent: missing required edge "DirectMessage.receiver"`)}
	}
	return nil
}

func (dmc *DirectMessageCreate) sqlSave(ctx context.Context) (*DirectMessage, error) {
	if err := dmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dmc.mutation.id = &_node.ID
	dmc.mutation.done = true
	return _node, nil
}

func (dmc *DirectMessageCreate) createSpec() (*DirectMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &DirectMessage{config: dmc.config}
		_spec = sqlgraph.NewCreateSpec(directmessage.Table, sqlgraph.NewFieldSpec(directmessage.FieldID, field.TypeInt))
	)
	if value, ok := dmc.mutation.Content(); ok {
		_spec.SetField(directmessage.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := dmc.mutation.SentAt(); ok {
		_spec.SetField(directmessage.FieldSentAt, field.TypeTime, value)
		_node.SentAt = value
	}
	if value, ok := dmc.mutation.ReadAt(); ok {
		_spec.SetField(directmessage.FieldReadAt, field.TypeTime, value)
		_node.ReadAt = value
	}
	if nodes := dmc.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   directmessage.SenderTable,
			Columns: []string{directmessage.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_sent_messages = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dmc.mutation.ReceiverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   directmessage.ReceiverTable,
			Columns: []string{directmessage.ReceiverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_received_messages = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DirectMessageCreateBulk is the builder for creating many DirectMessage entities in bulk.
type DirectMessageCreateBulk struct {
	config
	err      error
	builders []*DirectMessageCreate
}

// Save creates the DirectMessage entities in the database.
func (dmcb *DirectMessageCreateBulk) Save(ctx context.Context) ([]*DirectMessage, error) {
	if dmcb.err != nil {
		return nil, dmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dmcb.builders))
	nodes := make([]*DirectMessage, len(dmcb.builders))
	mutators := make([]Mutator, len(dmcb.builders))
	for i := range dmcb.builders {
		func(i int, root context.Context) {
			builder := dmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DirectMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dmcb *DirectMessageCreateBulk) SaveX(ctx context.Context) []*DirectMessage {
	v, err := dmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dmcb *DirectMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := dmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dmcb *DirectMessageCreateBulk) ExecX(ctx context.Context) {
	if err := dmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mayocream/twitter/ent/tweet"
	"github.com/mayocream/twitter/ent/user"
)

// Tweet is the model entity for the Tweet schema.
type Tweet struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TweetQuery when eager-loading is set.
	Edges         TweetEdges `json:"edges"`
	tweet_replies *int
	user_tweets   *int
	selectValues  sql.SelectValues
}

// TweetEdges holds the relations/edges for other nodes in the graph.
type TweetEdges struct {
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// LikedBy holds the value of the liked_by edge.
	LikedBy []*User `json:"liked_by,omitempty"`
	// RetweetedBy holds the value of the retweeted_by edge.
	RetweetedBy []*User `json:"retweeted_by,omitempty"`
	// ParentTweet holds the value of the parent_tweet edge.
	ParentTweet *Tweet `json:"parent_tweet,omitempty"`
	// Replies holds the value of the replies edge.
	Replies []*Tweet `json:"replies,omitempty"`
	// Mentions holds the value of the mentions edge.
	Mentions []*User `json:"mentions,omitempty"`
	// Hashtags holds the value of the hashtags edge.
	Hashtags []*Hashtag `json:"hashtags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TweetEdges) AuthorOrErr() (*User, error) {
	if e.Author != nil {
		return e.Author, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "author"}
}

// LikedByOrErr returns the LikedBy value or an error if the edge
// was not loaded in eager-loading.
func (e TweetEdges) LikedByOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.LikedBy, nil
	}
	return nil, &NotLoadedError{edge: "liked_by"}
}

// RetweetedByOrErr returns the RetweetedBy value or an error if the edge
// was not loaded in eager-loading.
func (e TweetEdges) RetweetedByOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.RetweetedBy, nil
	}
	return nil, &NotLoadedError{edge: "retweeted_by"}
}

// ParentTweetOrErr returns the ParentTweet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TweetEdges) ParentTweetOrErr() (*Tweet, error) {
	if e.ParentTweet != nil {
		return e.ParentTweet, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: tweet.Label}
	}
	return nil, &NotLoadedError{edge: "parent_tweet"}
}

// RepliesOrErr returns the Replies value or an error if the edge
// was not loaded in eager-loading.
func (e TweetEdges) RepliesOrErr() ([]*Tweet, error) {
	if e.loadedTypes[4] {
		return e.Replies, nil
	}
	return nil, &NotLoadedError{edge: "replies"}
}

// MentionsOrErr returns the Mentions value or an error if the edge
// was not loaded in eager-loading.
func (e TweetEdges) MentionsOrErr() ([]*User, error) {
	if e.loadedTypes[5] {
		return e.Mentions, nil
	}
	return nil, &NotLoadedError{edge: "mentions"}
}

// HashtagsOrErr returns the Hashtags value or an error if the edge
// was not loaded in eager-loading.
func (e TweetEdges) HashtagsOrErr() ([]*Hashtag, error) {
	if e.loadedTypes[6] {
		return e.Hashtags, nil
	}
	return nil, &NotLoadedError{edge: "hashtags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tweet) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tweet.FieldID:
			values[i] = new(sql.NullInt64)
		case tweet.FieldContent:
			values[i] = new(sql.NullString)
		case tweet.FieldCreatedAt, tweet.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case tweet.ForeignKeys[0]: // tweet_replies
			values[i] = new(sql.NullInt64)
		case tweet.ForeignKeys[1]: // user_tweets
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tweet fields.
func (t *Tweet) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tweet.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tweet.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				t.Content = value.String
			}
		case tweet.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case tweet.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case tweet.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field tweet_replies", value)
			} else if value.Valid {
				t.tweet_replies = new(int)
				*t.tweet_replies = int(value.Int64)
			}
		case tweet.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_tweets", value)
			} else if value.Valid {
				t.user_tweets = new(int)
				*t.user_tweets = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Tweet.
// This includes values selected through modifiers, order, etc.
func (t *Tweet) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the Tweet entity.
func (t *Tweet) QueryAuthor() *UserQuery {
	return NewTweetClient(t.config).QueryAuthor(t)
}

// QueryLikedBy queries the "liked_by" edge of the Tweet entity.
func (t *Tweet) QueryLikedBy() *UserQuery {
	return NewTweetClient(t.config).QueryLikedBy(t)
}

// QueryRetweetedBy queries the "retweeted_by" edge of the Tweet entity.
func (t *Tweet) QueryRetweetedBy() *UserQuery {
	return NewTweetClient(t.config).QueryRetweetedBy(t)
}

// QueryParentTweet queries the "parent_tweet" edge of the Tweet entity.
func (t *Tweet) QueryParentTweet() *TweetQuery {
	return NewTweetClient(t.config).QueryParentTweet(t)
}

// QueryReplies queries the "replies" edge of the Tweet entity.
func (t *Tweet) QueryReplies() *TweetQuery {
	return NewTweetClient(t.config).QueryReplies(t)
}

// QueryMentions queries the "mentions" edge of the Tweet entity.
func (t *Tweet) QueryMentions() *UserQuery {
	return NewTweetClient(t.config).QueryMentions(t)
}

// QueryHashtags queries the "hashtags" edge of the Tweet entity.
func (t *Tweet) QueryHashtags() *HashtagQuery {
	return NewTweetClient(t.config).QueryHashtags(t)
}

// Update returns a builder for updating this Tweet.
// Note that you need to call Tweet.Unwrap() before calling this method if this Tweet
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tweet) Update() *TweetUpdateOne {
	return NewTweetClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Tweet entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tweet) Unwrap() *Tweet {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tweet is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tweet) String() string {
	var builder strings.Builder
	builder.WriteString("Tweet(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("content=")
	builder.WriteString(t.Content)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tweets is a parsable slice of Tweet.
type Tweets []*Tweet

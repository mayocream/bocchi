// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mayocream/twitter/ent/directmessage"
	"github.com/mayocream/twitter/ent/predicate"
)

// DirectMessageDelete is the builder for deleting a DirectMessage entity.
type DirectMessageDelete struct {
	config
	hooks    []Hook
	mutation *DirectMessageMutation
}

// Where appends a list predicates to the DirectMessageDelete builder.
func (dmd *DirectMessageDelete) Where(ps ...predicate.DirectMessage) *DirectMessageDelete {
	dmd.mutation.Where(ps...)
	return dmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dmd *DirectMessageDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dmd.sqlExec, dmd.mutation, dmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dmd *DirectMessageDelete) ExecX(ctx context.Context) int {
	n, err := dmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dmd *DirectMessageDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(directmessage.Table, sqlgraph.NewFieldSpec(directmessage.FieldID, field.TypeInt))
	if ps := dmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dmd.mutation.done = true
	return affected, err
}

// DirectMessageDeleteOne is the builder for deleting a single DirectMessage entity.
type DirectMessageDeleteOne struct {
	dmd *DirectMessageDelete
}

// Where appends a list predicates to the DirectMessageDelete builder.
func (dmdo *DirectMessageDeleteOne) Where(ps ...predicate.DirectMessage) *DirectMessageDeleteOne {
	dmdo.dmd.mutation.Where(ps...)
	return dmdo
}

// Exec executes the deletion query.
func (dmdo *DirectMessageDeleteOne) Exec(ctx context.Context) error {
	n, err := dmdo.dmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{directmessage.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dmdo *DirectMessageDeleteOne) ExecX(ctx context.Context) {
	if err := dmdo.Exec(ctx); err != nil {
		panic(err)
	}
}

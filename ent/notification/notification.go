// Code generated by ent, DO NOT EDIT.

package notification

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the notification type in the database.
	Label = "notification"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldReadAt holds the string denoting the read_at field in the database.
	FieldReadAt = "read_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeRelatedTweet holds the string denoting the related_tweet edge name in mutations.
	EdgeRelatedTweet = "related_tweet"
	// EdgeRelatedUser holds the string denoting the related_user edge name in mutations.
	EdgeRelatedUser = "related_user"
	// Table holds the table name of the notification in the database.
	Table = "notifications"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "notifications"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_notifications"
	// RelatedTweetTable is the table that holds the related_tweet relation/edge.
	RelatedTweetTable = "notifications"
	// RelatedTweetInverseTable is the table name for the Tweet entity.
	// It exists in this package in order to avoid circular dependency with the "tweet" package.
	RelatedTweetInverseTable = "tweets"
	// RelatedTweetColumn is the table column denoting the related_tweet relation/edge.
	RelatedTweetColumn = "notification_related_tweet"
	// RelatedUserTable is the table that holds the related_user relation/edge.
	RelatedUserTable = "notifications"
	// RelatedUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	RelatedUserInverseTable = "users"
	// RelatedUserColumn is the table column denoting the related_user relation/edge.
	RelatedUserColumn = "notification_related_user"
)

// Columns holds all SQL columns for notification fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldCreatedAt,
	FieldReadAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "notifications"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"notification_related_tweet",
	"notification_related_user",
	"user_notifications",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeLike    Type = "like"
	TypeFollow  Type = "follow"
	TypeMention Type = "mention"
	TypeRetweet Type = "retweet"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeLike, TypeFollow, TypeMention, TypeRetweet:
		return nil
	default:
		return fmt.Errorf("notification: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Notification queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByReadAt orders the results by the read_at field.
func ByReadAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReadAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByRelatedTweetField orders the results by related_tweet field.
func ByRelatedTweetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelatedTweetStep(), sql.OrderByField(field, opts...))
	}
}

// ByRelatedUserField orders the results by related_user field.
func ByRelatedUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelatedUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newRelatedTweetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelatedTweetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RelatedTweetTable, RelatedTweetColumn),
	)
}
func newRelatedUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelatedUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RelatedUserTable, RelatedUserColumn),
	)
}
